{"title": "测试", "uid": "ff294b41f6454d72b979d968dd4769d6", "slug": "测试", "date": "2023-08-06 10:29:00", "updated": "2023-08-07 23:27:26.616000", "comments": true, "path": "api/articles/测试.json", "keywords": null, "cover": "/img/测试/awesome-selfhosted.jpg", "content": "<h2 id=\"这是一篇测试文档\"><a href=\"#这是一篇测试文档\" class=\"headerlink\" title=\"这是一篇测试文档\"></a>这是一篇测试文档</h2>", "text": "这是一篇测试文档", "link": "", "photos": [], "count_time": {"symbolsCount": 8, "symbolsTime": "1 mins."}, "categories": [{"name": "test", "slug": "test", "count": 1, "path": "api/categories/test.json"}], "tags": [{"name": "Test", "slug": "Test", "count": 1, "path": "api/tags/Test.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E7%AF%87%E6%B5%8B%E8%AF%95%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">这是一篇测试文档</span></a></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true, "prev_post": {}, "next_post": {"title": "python学习之re模块", "uid": "00fb2df139ade064036e614bfc314c4c", "slug": "python学习之re模块", "date": "2023-07-27 00:32:00", "updated": "2023-08-07 23:27:26.616000", "comments": true, "path": "api/articles/python学习之re模块.json", "keywords": null, "cover": "/img/python学习之re模块/python学习之re模块.jpg", "content": "<h1 id=\"一、正则表达式\"><a href=\"#一、正则表达式\" class=\"headerlink\" title=\"一、正则表达式\"></a>一、正则表达式</h1><p>正则表达式本身是一种小型的、高度专业化的编程语言，它并不是 Python 的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如 str 自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达式的语法都是一样的，区别只在于不同的编程语言实现支持的语法数量不同；但不用担心，不被支持的语法通常是不常用的部分。如果已经在其他语言里使用过正则表达式，只需要简单看一看就可以上手了。而在 python 中，通过内嵌集成 re 模块，程序员们可以直接调用来实现正则匹配。正则表达式模式被编译成一系列的字节码，然后由用 C 编写的匹配引擎执行。</p>\n<h2 id=\"1-1-数量词的贪婪模式与非贪婪模式\"><a href=\"#1-1-数量词的贪婪模式与非贪婪模式\" class=\"headerlink\" title=\"1.1 数量词的贪婪模式与非贪婪模式\"></a>1.1 数量词的贪婪模式与非贪婪模式</h2><p>正则表达式通常用于在文本中查找匹配的字符串。Python 里数量词默认是贪婪的（在少数语言里也可能是默认非贪婪），总是尝试匹配尽可能多的字符；非贪婪的则相反，总是尝试匹配尽可能少的字符。例如：正则表达式”ab*”如果用于查找”abbbc”，将找到”abbb”。而如果使用非贪婪的数量词”ab*?”，将找到”a”。</p>\n<h2 id=\"1-2-反斜杠的困扰\"><a href=\"#1-2-反斜杠的困扰\" class=\"headerlink\" title=\"1.2 反斜杠的困扰\"></a>1.2 反斜杠的困扰</h2><p>与大多数编程语言相同，正则表达式里使用<code>\\</code>作为转义字符，这就可能造成反斜杠困扰。假如你需要匹配文本中的字符<code>\\</code>，那么使用编程语言表示的正则表达式里将需要 4 个反斜杠<code>\\\\\\\\</code>：前两个和后两个分别用于在编程语言里转义成反斜杠，转换成两个反斜杠后再在正则表达式里转义成一个反斜杠。Python 里的原生字符串很好地解决了这个问题，这个例子中的正则表达式可以使用<code>r&#39;\\\\&#39;</code>表示。同样，匹配一个数字的<code>\\\\d</code>可以写成<code>r&#39;\\d&#39;</code>。有了原生字符串，你再也不用担心是不是漏写了反斜杠，写出来的表达式也更直观。</p>\n<h2 id=\"1-3-匹配模式\"><a href=\"#1-3-匹配模式\" class=\"headerlink\" title=\"1.3 匹配模式\"></a>1.3 匹配模式</h2><p>正则表达式提供了一些可用的匹配模式，比如忽略大小写、多行匹配等，这部分内容将在 Pattern 类的工厂方法 re.compile(pattern[, flags])中一起介绍。</p>\n<h1 id=\"二、re-模块的基本使用\"><a href=\"#二、re-模块的基本使用\" class=\"headerlink\" title=\"二、re 模块的基本使用\"></a>二、re 模块的基本使用</h1><p>正则表达式是用来匹配处理字符串的 python 中使用正则表达式需要引入 re 模块</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re  # 第一步，要引入re模块\na &#x3D; re.findall(&quot;匹配规则&quot;, &quot;这个字符串是否有匹配规则的字符&quot;)  # 第二步，调用模块函数\nprint(a)  # 以列表形式返回匹配到的字符串\n[&#39;匹配规则&#39;]</code></pre>\n\n<p><strong>^元字符</strong></p>\n<p>字符串开始位置与匹配规则符合就匹配，否则不匹配</p>\n<p>匹配字符串开头。在多行模式中匹配每一行的开头（Python3+已经失效，配合 compile 使用）</p>\n<p>^元字符如果写到[]字符集里就是反取</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;^匹配规则&quot;, &quot;匹配规则这个字符串是否匹配&quot;)  # 字符串开始位置与匹配规则符合就匹配，否则不匹配\nprint(a)\n#打印出 [&#39;匹配规则&#39;]\n[&#39;匹配规则&#39;]</code></pre>\n\n<p><strong>[^a-z]反取</strong></p>\n<p>匹配出除字母外的字符，^元字符如果写到字符集里就是反取</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;[^a-z]&quot;, &quot;匹配s规则这s个字符串是否s匹配f规则则re则则则&quot;)  # 反取，匹配出除字母外的字符\nprint(a)\nCopy[&#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;这&#39;, &#39;个&#39;, &#39;字&#39;, &#39;符&#39;, &#39;串&#39;, &#39;是&#39;, &#39;否&#39;, &#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;]</code></pre>\n\n<p><strong>$元字符</strong></p>\n<p>字符串结束位置与匹配规则符合就匹配，否则不匹配</p>\n<p>匹配字符串末尾，在多行模式中匹配每一行的末尾</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;匹配规则$&quot;, &quot;这个字符串是否匹配规则&quot;)  # 字符串结束位置与匹配规则符合就匹配，否则不匹配\nprint(a)\n[&#39;匹配规则&#39;]</code></pre>\n\n<p><strong>*元字符</strong></p>\n<p>需要字符串里完全符合，匹配规则，就匹配，（规则里的*元字符）前面的一个字符可以是 0 个或多个原本字符</p>\n<p>匹配前一个字符 0 或多次，贪婪匹配前导字符有多少个就匹配多少个很贪婪</p>\n<p>如果规则里只有一个分组，尽量避免用*否则会有可能匹配出空字符串</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 需要字符串里完全符合，匹配规则，就匹配，（规则里的*元字符）前面的一个字符可以是0或多个原本字符\na &#x3D; re.findall(&quot;匹配规则*&quot;, &quot;这个字符串是否匹配规则则则则则&quot;)\nprint(a)\n[&#39;匹配规则则则则则&#39;]</code></pre>\n\n<p><strong>+元字符</strong></p>\n<p>需要字符串里完全符合，匹配规则，就匹配，（规则里的+元字符）前面的一个字符可以是 1 个或多个原本字符</p>\n<p>匹配前一个字符 1 次或无限次，贪婪匹配前导字符有多少个就匹配多少个很贪婪</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 需要字符串里完全符合，匹配规则，就匹配，（规则里的+元字符）前面的一个字符可以是1个或多个原本字符\na &#x3D; re.findall(&quot;匹配+&quot;, &quot;匹配配配配配规则这个字符串是否匹配规则则则则则&quot;)\nprint(a)\n[&#39;匹配配配配配&#39;, &#39;匹配&#39;]</code></pre>\n\n<p><strong>?元字符</strong>(防止贪婪匹配)</p>\n<p>需要字符串里完全符合，匹配规则，就匹配，（规则里的?元字符）前面的一个字符可以是 0 个或 1 个原本字符</p>\n<p>匹配一个字符 0 次或 1 次</p>\n<p>还有一个功能是可以防止贪婪匹配，详情见防贪婪匹配</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 需要字符串里完全符合，匹配规则，就匹配，（规则里的?元字符）前面的一个字符可以是0个或1个原本字符\na &#x3D; re.findall(&quot;匹配规则?&quot;, &quot;匹配规这个字符串是否匹配规则则则则则&quot;)\nprint(a)\n[&#39;匹配规&#39;, &#39;匹配规则&#39;]</code></pre>\n\n<p><strong>{}元字符</strong>(范围)</p>\n<p>需要字符串里完全符合，匹配规则，就匹配，（规则里的 {} 元字符）前面的一个字符，是自定义字符数，位数的原本字符</p>\n<p>{m}匹配前一个字符 m 次，{m,n}匹配前一个字符 m 至 n 次，若省略 n，则匹配 m 至无限次</p>\n<p>{0,}匹配前一个字符 0 或多次,等同于*元字符<br>{+,}匹配前一个字符 1 次或无限次,等同于+元字符<br>{0,1}匹配前一个字符 0 次或 1 次,等同于?元字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# &#123;m&#125;匹配前一个字符m次，&#123;m,n&#125;匹配前一个字符m至n次，若省略n，则匹配m至无限次\na &#x3D; re.findall(&quot;匹配规则&#123;3&#125;&quot;, &quot;匹配规这个字符串是否匹配规则则则则则&quot;)\nprint(a)\n[&#39;匹配规则则则&#39;]</code></pre>\n\n<p><strong>[]元字符</strong>(字符集)</p>\n<p>需要字符串里完全符合，匹配规则，就匹配，（规则里的 [] 元字符）对应位置是[]里的任意一个字符就匹配</p>\n<p>字符集。对应的位置可以是字符集中任意字符。字符集中的字符可以逐个列出，也可以给出范围，如[abc]或[a-c]。[^abc]表示取反，即非 abc。<br>所有特殊字符在字符集中都失去其原有的特殊含义。用\\反斜杠转义恢复特殊字符的特殊含义。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 需要字符串里完全符合，匹配规则，就匹配，（规则里的 [] 元字符）对应位置是[]里的任意一个字符就匹配\na &#x3D; re.findall(&quot;匹配[a,b,c]规则&quot;, &quot;匹配a规则这个字符串是否匹配b规则则则则则&quot;)\nprint(a)\n[&#39;匹配a规则&#39;, &#39;匹配b规则&#39;]</code></pre>\n\n<p><strong>[^]</strong></p>\n<p>非，反取，匹配出除[]里面的字符，元字符如果写到字符集里就是反取</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Copyimport re\na &#x3D; re.findall(&quot;[^a-z]&quot;, &quot;匹配s规则这s个字符串是否s匹配f规则则re则则则&quot;)  # 反取，匹配出除字母外的字符\nprint(a)\nCopy[&#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;这&#39;, &#39;个&#39;, &#39;字&#39;, &#39;符&#39;, &#39;串&#39;, &#39;是&#39;, &#39;否&#39;, &#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;]</code></pre>\n\n<p><strong>反斜杠后边跟普通字符实现特殊功能</strong>(预定义字符)</p>\n<p>预定义字符是在字符集和组里都是有用的</p>\n<p>\\d 匹配任何十进制数，它相当于类[0-9]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;\\d&quot;, &quot;匹配规则这2个字符串3是否匹配规则5则则则7则&quot;)  # \\d匹配任何十进制数，它相当于类[0-9]\nprint(a)\n[&#39;2&#39;, &#39;3&#39;, &#39;5&#39;, &#39;7&#39;]</code></pre>\n\n<p><strong>\\d+</strong></p>\n<p>匹配一位或者多位数的数字时用</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;\\d+&quot;, &quot;匹配规则这2个字符串134444是否匹配规则5则则则7则&quot;)  # \\d+如果需要匹配一位或者多位数的数字时用\nprint(a)\n[&#39;2&#39;, &#39;134444&#39;, &#39;5&#39;, &#39;7&#39;]</code></pre>\n\n<p><strong>\\D</strong></p>\n<p>匹配任何非数字字符，它相当于类[^0-9]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;\\D&quot;, &quot;匹配规则这2个字符串3是否匹配规则5则则则7则&quot;)  # \\D匹配任何非数字字符，它相当于类[^0-9]\nprint(a)\n[&#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;这&#39;, &#39;个&#39;, &#39;字&#39;, &#39;符&#39;, &#39;串&#39;, &#39;是&#39;, &#39;否&#39;, &#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;]</code></pre>\n\n<p><strong>\\s</strong></p>\n<p>匹配任何空白字符，它相当于类[\\t\\n\\r\\f\\v]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# \\s匹配任何空白字符，它相当于类[\\t\\n\\r\\f\\v]\na &#x3D; re.findall(&quot;\\s&quot;, &quot;匹配规则   这2个字符串3是否匹\\n配规则5则则则7则&quot;)\nprint(a)\n[&#39; &#39;, &#39; &#39;, &#39; &#39;, &#39;\\n&#39;]</code></pre>\n\n<p><strong>\\S</strong></p>\n<p>匹配任何非空白字符，它相当于类[^\\t\\n\\r\\f\\v]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# \\S匹配任何非空白字符，它相当于类[^\\t\\n\\r\\f\\v]\na &#x3D; re.findall(&quot;\\S&quot;, &quot;匹配规则   这2个字符串3是否匹\\n配规则5则则则7则&quot;)\nprint(a)\n[&#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;这&#39;, &#39;2&#39;, &#39;个&#39;, &#39;字&#39;, &#39;符&#39;, &#39;串&#39;, &#39;3&#39;, &#39;是&#39;, &#39;否&#39;, &#39;匹&#39;, &#39;配&#39;, &#39;规&#39;, &#39;则&#39;, &#39;5&#39;, &#39;则&#39;, &#39;则&#39;, &#39;则&#39;, &#39;7&#39;, &#39;则&#39;]</code></pre>\n\n<p><strong>\\w</strong></p>\n<p>匹配包括下划线在内任何字母数字字符，它相当于类[a-zA-Z0-9_]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# \\w匹配包括下划线在内任何字母数字字符，它相当于类[a-zA-Z0-9_]\na &#x3D; re.findall(&#39;\\w&#39;, &quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;&quot;)\nprint(a)\n[&#39;h&#39;, &#39;t&#39;, &#39;t&#39;, &#39;p&#39;, &#39;s&#39;, &#39;w&#39;, &#39;w&#39;, &#39;w&#39;, &#39;c&#39;, &#39;n&#39;, &#39;b&#39;, &#39;l&#39;, &#39;o&#39;, &#39;g&#39;, &#39;s&#39;, &#39;c&#39;, &#39;o&#39;, &#39;m&#39;]</code></pre>\n\n<p><strong>\\W</strong></p>\n<p>匹配非任何字母数字字符包括下划线在内，它相当于类[^a-zA-Z0-9_]</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# \\w匹配包括下划线在内任何字母数字字符，它相当于类[a-zA-Z0-9_]\na &#x3D; re.findall(&#39;\\W&#39;, &quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;&quot;)\nprint(a)\n[&#39;:&#39;, &#39;&#x2F;&#39;, &#39;&#x2F;&#39;, &#39;.&#39;, &#39;.&#39;, &#39;&#x2F;&#39;]</code></pre>\n\n<p><strong>()元字符</strong>(分组)</p>\n<p>也就是分组匹配，()里面的为一个组也可以理解成一个整体</p>\n<p>如果()后面跟的是特殊元字符如 (adc)* 那么*控制的前导字符就是()里的整体内容，不再是前导一个字符</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 也就是分组匹配，()里面的为一个组也可以理解成一个整体\na &#x3D; re.search(&quot;(a4)+&quot;, &quot;a4a4a4a4a4dg4g654gb&quot;)  # 匹配一个或多个a4\nb &#x3D; a.group()\nprint(b)\na4a4a4a4a4\nimport re\n# 也就是分组匹配，()里面的为一个组也可以理解成一个整体\n# 匹配 (a) (\\d0-9的数字) (+可以是1个到多个0-9的数字)\na &#x3D; re.search(&quot;a(\\d+)&quot;, &quot;a466666664a4a4a4dg4g654gb&quot;)\nb &#x3D; a.group()\nprint(b)\na466666664</code></pre>\n\n<p><strong>|元字符</strong>(或)</p>\n<p>|或，或就是前后其中一个符合就匹配</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(r&quot;你|好&quot;, &quot;a4a4a你4aabc4a4dgg好dg4g654g&quot;)  # |或，或就是前后其中一个符合就匹配\nprint(a)\n[&#39;你&#39;, &#39;好&#39;]</code></pre>\n\n<h1 id=\"三、re-模块中常用功能函数\"><a href=\"#三、re-模块中常用功能函数\" class=\"headerlink\" title=\"三、re 模块中常用功能函数\"></a>三、re 模块中常用功能函数</h1><h2 id=\"3-1-正则表达式的两种书写方式\"><a href=\"#3-1-正则表达式的两种书写方式\" class=\"headerlink\" title=\"3.1 正则表达式的两种书写方式\"></a>3.1 正则表达式的两种书写方式</h2><p>1.一种是直接在函数里书写规则，<strong>推荐使用</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; re.findall(&quot;匹配规则&quot;, &quot;这个字符串是否有匹配规则的字符&quot;)\n[&#39;匹配规则&#39;]</code></pre>\n\n<p>2.另一种是先将正则表达式的字符串形式编译为 Pattern 实例，然后使用 Pattern 实例处理文本并获得匹配结果（一个 Match 实例），最后使用 Match 实例获得信息，进行其他的操作。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n\n# 将正则表达式编译成Pattern对象\npattern &#x3D; re.compile(r&#39;hello&#39;)\n\n# 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None\nmatch &#x3D; pattern.match(&#39;hello world!&#39;)\n\nif match:\n    # 使用Match获得分组信息\n    print(match.group())\nhello</code></pre>\n\n<h2 id=\"3-2-re-compile-strPattern-flag-函数\"><a href=\"#3-2-re-compile-strPattern-flag-函数\" class=\"headerlink\" title=\"3.2 re.compile(strPattern[, flag])函数\"></a>3.2 re.compile(strPattern[, flag])函数</h2><p>这个方法是 Pattern 类的工厂方法，用于将字符串形式的正则表达式编译为 Pattern 对象。 第二个参数 flag 是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如 re.I | re.M。另外，你也可以在 regex 字符串中指定模式，比如 re.compile(‘pattern’, re.I | re.M)与 re.compile(‘(?im)pattern’)是等价的。</p>\n<p>下表是所有的正则匹配模式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">修饰符</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">re.I</td>\n<td align=\"center\">使匹配对大小写不敏感</td>\n</tr>\n<tr>\n<td align=\"center\">re.L</td>\n<td align=\"center\">做本地化识别（locale-aware）匹配</td>\n</tr>\n<tr>\n<td align=\"center\">re.M</td>\n<td align=\"center\">多行匹配，影响 ^ 和 $</td>\n</tr>\n<tr>\n<td align=\"center\">re.S</td>\n<td align=\"center\">使 . 匹配包括换行在内的所有字符</td>\n</tr>\n<tr>\n<td align=\"center\">re.U</td>\n<td align=\"center\">根据 Unicode 字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.</td>\n</tr>\n<tr>\n<td align=\"center\">re.X</td>\n<td align=\"center\">该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-2-1-re-S\"><a href=\"#3-2-1-re-S\" class=\"headerlink\" title=\"3.2.1 re.S\"></a>3.2.1 re.S</h3><ul>\n<li>在 Python 的正则表达式中，有一个参数为 re.S。它表示 “.” 的作用扩展到整个字符串，包括“\\n”。看如下代码：</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\na &#x3D; &#39;&#39;&#39;asdfhellopass:\n    worldaf\n    &#39;&#39;&#39;\nb &#x3D; re.findall(&#39;hello(.*?)world&#39;, a)\nc &#x3D; re.findall(&#39;hello(.*?)world&#39;, a, re.S)\nprint(&#39;b is &#39;, b)\nprint(&#39;c is &#39;, c)\nb is  []\nc is  [&#39;pass:\\n    &#39;]</code></pre>\n\n<p>正则表达式中，“.”的作用是匹配除“\\n”以外的任何字符，也就是说，它是在一行中进行匹配。这里的“行”是以“\\n”进行区分的。a 字符串有每行的末尾有一个“\\n”，不过它不可见。</p>\n<p>如果不使用 re.S 参数，则只在每一行内进行匹配，如果一行没有，就换下一行重新开始，不会跨行。而使用 re.S 参数以后，正则表达式会将这个字符串作为一个整体，将“\\n”当做一个普通的字符加入到这个字符串中，在整体中进行匹配。</p>\n<h3 id=\"3-2-2-re-I\"><a href=\"#3-2-2-re-I\" class=\"headerlink\" title=\"3.2.2 re.I\"></a>3.2.2 re.I</h3><ul>\n<li>不区分大小写</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">res &#x3D; re.findall(r&quot;A&quot;, &quot;abc&quot;, re.I)\nprint(res)\n[&#39;a&#39;]</code></pre>\n\n<h3 id=\"3-2-3-re-M\"><a href=\"#3-2-3-re-M\" class=\"headerlink\" title=\"3.2.3 re.M\"></a>3.2.3 re.M</h3><ul>\n<li>将所有行的尾字母输出（python3+已经无效）</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s &#x3D; &#39;12 34&#x2F;n56 78&#x2F;n90&#39;\n\nre.findall(r&#39;^&#x2F;d+&#39;, s, re.M)  # 匹配位于行首的数字  # [&#39;12&#39;, &#39;56&#39;, &#39;90&#39;]\nre.findall(r&#39;&#x2F;A&#x2F;d+&#39;, s, re.M)  # 匹配位于字符串开头的数字  # [&#39;12&#39;]\nre.findall(r&#39;&#x2F;d+$&#39;, s, re.M)  # 匹配位于行尾的数字  # [&#39;34&#39;, &#39;78&#39;, &#39;90&#39;]\nre.findall(r&#39;&#x2F;d+&#x2F;Z&#39;, s, re.M)  # 匹配位于字符串尾的数字  # [&#39;90&#39;]</code></pre>\n\n<h3 id=\"3-2-4-re-sub\"><a href=\"#3-2-4-re-sub\" class=\"headerlink\" title=\"3.2.4 re.sub\"></a>3.2.4 re.sub</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 要求结果：[&#39;12&#39;, &#39;23&#39;, &#39;34&#39;]\nl &#x3D; [&#39;1 2 &#39;, &#39;2   3&#39;, &#39;  3 4&#39;]\nimport re\nprint(eval(re.sub(r&#39;\\s*&#39;, &#39;&#39;, str(l))))\n[&#39;12&#39;, &#39;23&#39;, &#39;34&#39;]</code></pre>\n\n<h2 id=\"3-3-re-match-pattern-string-flags-函数-常用\"><a href=\"#3-3-re-match-pattern-string-flags-函数-常用\" class=\"headerlink\" title=\"3.3 re.match(pattern, string[, flags])函数(常用)\"></a>3.3 re.match(pattern, string[, flags])函数(常用)</h2><p>match，从头匹配一个符合规则的字符串，从起始位置开始匹配，匹配成功返回一个对象，未匹配成功返回 None<br>match(pattern, string, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>string ： 要匹配的字符串</li>\n<li>falgs ： 匹配模式</li>\n</ul>\n<p>注意：match()函数 与 search()函数基本是一样的功能，不一样的就是 match()匹配字符串开始位置的一个符合规则的字符串，search()是在字符串全局匹配第一个合规则的字符串</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 无分组\norigin &#x3D; &quot;hello egon bcd egon lge egon acd 19&quot;\nr &#x3D; re.match(&quot;h\\w+&quot;, origin)  # match，从起始位置开始匹配，匹配成功返回一个对象，未匹配成功返回None\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nhello\n()\n&#123;&#125;\n# 有分组\n# 为何要有分组？提取匹配成功的指定内容（先匹配成功全部正则，再匹配成功的局部内容提取出来）\nr &#x3D; re.match(&quot;h(\\w+)&quot;, origin)  # match，从起始位置开始匹配，匹配成功返回一个对象，未匹配成功返回None\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nhello\n(&#39;ello&#39;,)\n&#123;&#125;\n# 有两个分组定义了key\n# 为何要有分组？提取匹配成功的指定内容（先匹配成功全部正则，再匹配成功的局部内容提取出来）\n# ?P&lt;&gt;定义组里匹配内容的key(键)，&lt;&gt;里面写key名称，值就是匹配到的内容\nr &#x3D; re.match(&quot;(?P&lt;n1&gt;h)(?P&lt;n2&gt;\\w+)&quot;, origin)\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nhello\n(&#39;h&#39;, &#39;ello&#39;)\n&#123;&#39;n1&#39;: &#39;h&#39;, &#39;n2&#39;: &#39;ello&#39;&#125;</code></pre>\n\n<h2 id=\"3-4-分组函数\"><a href=\"#3-4-分组函数\" class=\"headerlink\" title=\"3.4 分组函数\"></a>3.4 分组函数</h2><p><code>?P&lt;n1&gt;</code> # ?P&lt;&gt;定义组里匹配内容的 key(键)，&lt;&gt;里面写 key 名称，值就是匹配到的内容（只对正则函数返回对象时有用）</p>\n<p>取出匹配对象方法</p>\n<p>只对正则函数返回对象的有用</p>\n<ul>\n<li>group() # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来，有参取匹配到的第几个如 2</li>\n<li>groups() # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果</li>\n<li>groupdict() # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了 key 的组结果</li>\n</ul>\n<h2 id=\"3-5-re-search-pattern-string-flags-函数\"><a href=\"#3-5-re-search-pattern-string-flags-函数\" class=\"headerlink\" title=\"3.5 re.search(pattern, string[, flags])函数\"></a>3.5 re.search(pattern, string[, flags])函数</h2><p>search,浏览全部字符串，匹配第一符合规则的字符串，浏览整个字符串去匹配第一个，未匹配成功返回 None</p>\n<p>search(pattern, string, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>string ： 要匹配的字符串</li>\n<li>falgs ： 匹配模式</li>\n</ul>\n<p>注意：match()函数 与 search()函数基本是一样的功能，不一样的就是 match()匹配字符串开始位置的一个符合规则的字符串，search()是在字符串全局匹配第一个合规则的字符串</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 无分组\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\n# search浏览全部字符串，匹配第一符合规则的字符串，浏览整个字符串去匹配第一个，未匹配成功返回None\nr &#x3D; re.search(&quot;a\\w+&quot;, origin)\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nalex\n()\n&#123;&#125;\n# 有分组\n# 为何要有分组？提取匹配成功的指定内容（先匹配成功全部正则，再匹配成功的局部内容提取出来）\nr &#x3D; re.search(&quot;a(\\w+).*(\\d)&quot;, origin)\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nalex bcd alex lge alex acd 19\n(&#39;lex&#39;, &#39;9&#39;)\n&#123;&#125;\n# 有两个分组定义了key\n# 为何要有分组？提取匹配成功的指定内容（先匹配成功全部正则，再匹配成功的局部内容提取出来）\n# ?P&lt;&gt;定义组里匹配内容的key(键)，&lt;&gt;里面写key名称，值就是匹配到的内容\nr &#x3D; re.search(&quot;a(?P&lt;n1&gt;\\w+).*(?P&lt;n2&gt;\\d)&quot;, origin)\nprint(r.group())  # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来\nprint(r.groups())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果\nprint(r.groupdict())  # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了key的组结果\nalex bcd alex lge alex acd 19\n(&#39;lex&#39;, &#39;9&#39;)\n&#123;&#39;n1&#39;: &#39;lex&#39;, &#39;n2&#39;: &#39;9&#39;&#125;</code></pre>\n\n<h2 id=\"3-6-re-findall-pattern-string-flags-函数-常用\"><a href=\"#3-6-re-findall-pattern-string-flags-函数-常用\" class=\"headerlink\" title=\"3.6 re.findall(pattern, string[, flags])函数(常用)\"></a>3.6 re.findall(pattern, string[, flags])函数(常用)</h2><p>findall(pattern, string, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>string ： 要匹配的字符串</li>\n<li>falgs ： 匹配模式</li>\n</ul>\n<p>浏览全部字符串，匹配所有合规则的字符串，匹配到的字符串放到一个列表中，未匹配成功返回空列表</p>\n<p>注意：一旦匹配成，再次匹配，是从前一次匹配成功的，后面一位开始的，也可以理解为匹配成功的字符串，不在参与下次匹配</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 无分组\nr &#x3D; re.findall(&quot;\\d+\\w\\d+&quot;, &quot;a2b3c4d5&quot;)  # 浏览全部字符串，匹配所有合规则的字符串，匹配到的字符串放到一个列表中\nprint(r)  # 注意：匹配成功的字符串，不在参与下次匹配,所以3c4也符合规则但是没匹配到\n[&#39;2b3&#39;, &#39;4d5&#39;]</code></pre>\n\n<p>注意：如果没写匹配规则，也就是空规则，返回的是一个比原始字符串多一位的，空字符串列表</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 无分组\nr &#x3D; re.findall(&quot;&quot;, &quot;a2b3c4d5&quot;)  # 浏览全部字符串，匹配所有合规则的字符串，匹配到的字符串放到一个列表中\nprint(r)  # 注意：如果没写匹配规则，也就是空规则，返回的是一个比原始字符串多一位的，空字符串列表\n[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</code></pre>\n\n<p>注意：正则匹配到空字符的情况，如果规则里只有一个组，而组后面是<em>就表示组里的内容可以是 0 个或者多过，这样组里就有了两个意思，一个意思是匹配组里的内容，二个意思是匹配组里 0 内容（即是空白）所以尽量避免用</em>否则会有可能匹配出空字符串</p>\n<p>注意：正则只拿组里最后一位，如果规则里只有一个组，匹配到的字符串里在拿组内容是，拿的是匹配到的内容最后一位</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\nr &#x3D; re.findall(&quot;(a)*&quot;, origin)\nprint(r)\n[&#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;a&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;, &#39;&#39;]</code></pre>\n\n<p>无分组：匹配所有合规则的字符串，匹配到的字符串放到一个列表中</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\n# 无分组\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\nr &#x3D; re.findall(&quot;a\\w+&quot;, origin)  # 浏览全部字符串，匹配所有合规则的字符串，匹配到的字符串放到一个列表中\nprint(r)\n[&#39;alex&#39;, &#39;alex&#39;, &#39;alex&#39;, &#39;acd&#39;]</code></pre>\n\n<p>有分组：只将匹配到的字符串里，组的部分放到列表里返回，相当于 groups()方法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\nr &#x3D; re.findall(&quot;a(\\w+)&quot;, origin)  # 有分组：只将匹配到的字符串里，组的部分放到列表里返回\nprint(r)\n[&#39;lex&#39;, &#39;lex&#39;, &#39;lex&#39;, &#39;cd&#39;]</code></pre>\n\n<p>多个分组：只将匹配到的字符串里，组的部分放到一个元组中，最后将所有元组放到一个列表里返</p>\n<p>相当于在 group()结果里再将组的部分，分别，拿出来放入一个元组，最后将所有元组放入一个列表返回</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\n# 多个分组：只将匹配到的字符串里，组的部分放到一个元组中，最后将所有元组放到一个列表里返回\nr &#x3D; re.findall(&quot;(a)(\\w+)&quot;, origin)\nprint(r)\n[(&#39;a&#39;, &#39;lex&#39;), (&#39;a&#39;, &#39;lex&#39;), (&#39;a&#39;, &#39;lex&#39;), (&#39;a&#39;, &#39;cd&#39;)]</code></pre>\n\n<p>分组中有分组：只将匹配到的字符串里，组的部分放到一个元组中，先将包含有组的组，看作一个整体也就是一个组，把这个整体组放入一个元组里，然后在把组里的组放入一个元组，最后将所有组放入一个列表返回</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\n# 分组中有分组：只将匹配到的字符串里，组的部分放到一个元组中，先将包含有组的组，看作一个整体也就是一个组，把这个整体组放入一个元组里，然后在把组里的组放入一个元组，最后将所有组放入一个列表返回\nr &#x3D; re.findall(&quot;(a)(\\w+(e))&quot;, origin)\nprint(r)\n[(&#39;a&#39;, &#39;le&#39;, &#39;e&#39;), (&#39;a&#39;, &#39;le&#39;, &#39;e&#39;), (&#39;a&#39;, &#39;le&#39;, &#39;e&#39;)]</code></pre>\n\n<p>?:在有分组的情况下 findall()函数，不只拿分组里的字符串，拿所有匹配到的字符串，注意?:只用于不是返回正则对象的函数如 findall()</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\n# ?:在有分组的情况下，不只拿分组里的字符串，拿所有匹配到的字符串，注意?:只用于不是返回正则对象的函数如findall()\nb &#x3D; re.findall(&quot;a(?:\\w+)&quot;, origin)\nprint(b)\n[&#39;alex&#39;, &#39;alex&#39;, &#39;alex&#39;, &#39;acd&#39;]</code></pre>\n\n<h2 id=\"3-7-re-split-pattern-string-maxsplit-函数\"><a href=\"#3-7-re-split-pattern-string-maxsplit-函数\" class=\"headerlink\" title=\"3.7 re.split(pattern, string[, maxsplit])函数\"></a>3.7 re.split(pattern, string[, maxsplit])函数</h2><p>根据正则匹配分割字符串，返回分割后的一个列表</p>\n<p>split(pattern, string, maxsplit&#x3D;0, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>string ： 要匹配的字符串</li>\n<li>maxsplit：指定分割个数</li>\n<li>flags ： 匹配模式</li>\n</ul>\n<p>按照一个字符将全部字符串进行分割</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\nr &#x3D; re.split(&quot;a&quot;, origin)  # 根据正则匹配分割字符串\nprint(r)\n[&#39;hello &#39;, &#39;lex bcd &#39;, &#39;lex lge &#39;, &#39;lex &#39;, &#39;cd 19&#39;]</code></pre>\n\n<p>将匹配到的字符串作为分割标准进行分割</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex 2acd 19&quot;\nr &#x3D; re.split(&quot;a\\w+&quot;, origin)  # 根据正则匹配分割字符串\nprint(r)\n[&#39;hello &#39;, &#39; bcd &#39;, &#39; lge &#39;, &#39; 2&#39;, &#39; 19&#39;]</code></pre>\n\n<h2 id=\"3-8-re-sub-pattern-repl-string-count-函数\"><a href=\"#3-8-re-sub-pattern-repl-string-count-函数\" class=\"headerlink\" title=\"3.8 re.sub(pattern, repl, string[, count])函数\"></a>3.8 re.sub(pattern, repl, string[, count])函数</h2><p>替换匹配成功的指定位置字符串</p>\n<p>sub(pattern, repl, string, count&#x3D;0, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>repl ： 要替换的字符串</li>\n<li>string ： 要匹配的字符串</li>\n<li>count ： 指定匹配个数</li>\n<li>flags ： 匹配模式</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\nr &#x3D; re.sub(&quot;a&quot;, &quot;替换&quot;, origin)  # 替换匹配成功的指定位置字符串\nprint(r)\nhello 替换lex bcd 替换lex lge 替换lex 替换cd 19</code></pre>\n\n<h2 id=\"3-9-re-subn-pattern-repl-string-count-flags-函数\"><a href=\"#3-9-re-subn-pattern-repl-string-count-flags-函数\" class=\"headerlink\" title=\"3.9 re.subn(pattern, repl, string,[, count][, flags])函数\"></a>3.9 re.subn(pattern, repl, string,[, count][, flags])函数</h2><p>替换匹配成功的指定位置字符串,并且返回替换次数，可以用两个变量分别接受</p>\n<p>subn(pattern, repl, string, count&#x3D;0, flags&#x3D;0)</p>\n<ul>\n<li>pattern： 正则模型</li>\n<li>repl ： 要替换的字符串</li>\n<li>string ： 要匹配的字符串</li>\n<li>count ： 指定匹配个数</li>\n<li>flags ： 匹配模式</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import re\norigin &#x3D; &quot;hello alex bcd alex lge alex acd 19&quot;\na, b &#x3D; re.subn(&quot;a&quot;, &quot;替换&quot;, origin)  # 替换匹配成功的指定位置字符串,并且返回替换次数，可以用两个变量分别接受\nprint(a)\nprint(b)\nhello 替换lex bcd 替换lex lge 替换lex 替换cd 19\n4</code></pre>\n\n<h1 id=\"四、注意事项\"><a href=\"#四、注意事项\" class=\"headerlink\" title=\"四、注意事项\"></a>四、注意事项</h1><ol>\n<li>r 原生字符：让在 python 里有特殊意义的字符如\\b，转换成原生字符（就是去除它在 python 的特殊意义），不然会给正则表达式有冲突，为了避免这种冲突可以在规则前加原始字符 r</li>\n<li>正则表达式，返回类型为表达式对象的，如：&lt;_sre.SRE_Match object; span&#x3D;(6, 7), match&#x3D;’a’&gt;，返回对象时，需要用正则方法取字符串，方法有：<ol>\n<li>group() # 获取匹配到的所有结果，不管有没有分组将匹配到的全部拿出来，有参取匹配到的第几个如 2</li>\n<li>groups() # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分的结果</li>\n<li>groupdict() # 获取模型中匹配到的分组结果，只拿出匹配到的字符串中分组部分定义了 key 的组结果</li>\n</ol>\n</li>\n<li>匹配到的字符串里出现空字符：注意：正则匹配到空字符的情况，如果规则里只有一个组，而组后面是<em>就表示组里的内容可以是 0 个或者多过，这样组里就有了两个意思，一个意思是匹配组里的内容，二个意思是匹配组里 0 内容（即是空白）所以尽量避免用</em>否则会有可能匹配出空字符串</li>\n<li>()分组：注意：分组的意义，就是在匹配成功的字符串中，再提取()里的内容，也就是组里面的字符串</li>\n<li>?:在有分组的情况下 findall()函数，不只拿分组里的字符串，拿所有匹配到的字符串，注意?:只用于不是返回正则对象的函数如 findall()</li>\n</ol>\n<h1 id=\"五、计算器-经典\"><a href=\"#五、计算器-经典\" class=\"headerlink\" title=\"五、计算器(经典)\"></a>五、计算器(经典)</h1><p>基于递归和正则将下面的字符串翻译成计算器表达式，并且获取最终结果：<code>expression=&#39;-1-2*((60+2*(-3-40.0+42425/5)*(9-2*5/3+357/553/3*99/4*2998+10*568/14))-(-4*3)/(16-3*2))+56+(56-45)&#39;</code></p>\n<p>如果代码正确，计算结果为：<code>-553071849.7670887</code></p>\n<p>提示：<code>content=re.search(&#39;\\(([\\-\\+\\*\\/]*\\d+\\.?\\d*)+\\)&#39;,expression).group() #(-3-40.0/5)</code></p>\n<h2 id=\"5-1-复杂版本\"><a href=\"#5-1-复杂版本\" class=\"headerlink\" title=\"5.1 复杂版本\"></a>5.1 复杂版本</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#!&#x2F;usr&#x2F;bin&#x2F;env python\n# -*- coding:utf-8 -*-\n&quot;&quot;&quot;\n该计算器思路：\n    1、递归寻找表达式中只含有 数字和运算符的表达式，并计算结果\n    2、由于整数计算会忽略小数，所有的数字都认为是浮点型操作，以此来保留小数\n使用技术：\n    1、正则表达式\n    2、递归\n&quot;&quot;&quot;\n\nimport re\n\n\ndef compute_mul_div(arg):\n    &quot;&quot;&quot; 操作乘除\n    :param expression:表达式\n    :return:计算结果\n    &quot;&quot;&quot;\n\n    val &#x3D; arg[0]\n    mch &#x3D; re.search(&#39;\\d+\\.*\\d*[\\*\\&#x2F;]+[\\+\\-]?\\d+\\.*\\d*&#39;, val)\n    if not mch:\n        return\n    content &#x3D; re.search(&#39;\\d+\\.*\\d*[\\*\\&#x2F;]+[\\+\\-]?\\d+\\.*\\d*&#39;, val).group()\n\n    if len(content.split(&#39;*&#39;)) &gt; 1:\n        n1, n2 &#x3D; content.split(&#39;*&#39;)\n        value &#x3D; float(n1) * float(n2)\n    else:\n        n1, n2 &#x3D; content.split(&#39;&#x2F;&#39;)\n        value &#x3D; float(n1) &#x2F; float(n2)\n\n    before, after &#x3D; re.split(&#39;\\d+\\.*\\d*[\\*\\&#x2F;]+[\\+\\-]?\\d+\\.*\\d*&#39;, val, 1)\n    new_str &#x3D; &quot;%s%s%s&quot; % (before, value, after)\n    arg[0] &#x3D; new_str\n    compute_mul_div(arg)\n\n\ndef compute_add_sub(arg):\n    &quot;&quot;&quot; 操作加减\n    :param expression:表达式\n    :return:计算结果\n    &quot;&quot;&quot;\n    while True:\n        if arg[0].__contains__(&#39;+-&#39;) or arg[0].__contains__(&quot;++&quot;) or arg[\n                0].__contains__(&#39;-+&#39;) or arg[0].__contains__(&quot;--&quot;):\n            arg[0] &#x3D; arg[0].replace(&#39;+-&#39;, &#39;-&#39;)\n            arg[0] &#x3D; arg[0].replace(&#39;++&#39;, &#39;+&#39;)\n            arg[0] &#x3D; arg[0].replace(&#39;-+&#39;, &#39;-&#39;)\n            arg[0] &#x3D; arg[0].replace(&#39;--&#39;, &#39;+&#39;)\n        else:\n            break\n\n    if arg[0].startswith(&#39;-&#39;):\n        arg[1] +&#x3D; 1\n        arg[0] &#x3D; arg[0].replace(&#39;-&#39;, &#39;&amp;&#39;)\n        arg[0] &#x3D; arg[0].replace(&#39;+&#39;, &#39;-&#39;)\n        arg[0] &#x3D; arg[0].replace(&#39;&amp;&#39;, &#39;+&#39;)\n        arg[0] &#x3D; arg[0][1:]\n    val &#x3D; arg[0]\n    mch &#x3D; re.search(&#39;\\d+\\.*\\d*[\\+\\-]&#123;1&#125;\\d+\\.*\\d*&#39;, val)\n    if not mch:\n        return\n    content &#x3D; re.search(&#39;\\d+\\.*\\d*[\\+\\-]&#123;1&#125;\\d+\\.*\\d*&#39;, val).group()\n    if len(content.split(&#39;+&#39;)) &gt; 1:\n        n1, n2 &#x3D; content.split(&#39;+&#39;)\n        value &#x3D; float(n1) + float(n2)\n    else:\n        n1, n2 &#x3D; content.split(&#39;-&#39;)\n        value &#x3D; float(n1) - float(n2)\n\n    before, after &#x3D; re.split(&#39;\\d+\\.*\\d*[\\+\\-]&#123;1&#125;\\d+\\.*\\d*&#39;, val, 1)\n    new_str &#x3D; &quot;%s%s%s&quot; % (before, value, after)\n    arg[0] &#x3D; new_str\n    compute_add_sub(arg)\n\n\ndef compute(expression):\n    &quot;&quot;&quot; 操作加减乘除\n    :param expression:表达式\n    :return:计算结果\n    &quot;&quot;&quot;\n    inp &#x3D; [expression, 0]\n\n    # 处理表达式中的乘除\n    compute_mul_div(inp)\n\n    # 处理\n    compute_add_sub(inp)\n    if divmod(inp[1], 2)[1] &#x3D;&#x3D; 1:\n        result &#x3D; float(inp[0])\n        result &#x3D; result * -1\n    else:\n        result &#x3D; float(inp[0])\n    return result\n\n\ndef exec_bracket(expression):\n    &quot;&quot;&quot; 递归处理括号，并计算\n    :param expression: 表达式\n    :return:最终计算结果\n    &quot;&quot;&quot;\n    # 如果表达式中已经没有括号，则直接调用负责计算的函数，将表达式结果返回，如：2*1-82+444\n    if not re.search(&#39;\\(([\\+\\-\\*\\&#x2F;]*\\d+\\.*\\d*)&#123;2,&#125;\\)&#39;, expression):\n        final &#x3D; compute(expression)\n        return final\n    # 获取 第一个 只含有 数字&#x2F;小数 和 操作符 的括号\n    # 如：\n    #    [&#39;1-2*((60-30+(-40.0&#x2F;5)*(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;]\n    #    找出：(-40.0&#x2F;5)\n    content &#x3D; re.search(&#39;\\(([\\+\\-\\*\\&#x2F;]*\\d+\\.*\\d*)&#123;2,&#125;\\)&#39;, expression).group()\n\n    # 分割表达式，即：\n    # 将[&#39;1-2*((60-30+(-40.0&#x2F;5)*(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;]\n    # 分割更三部分：[&#39;1-2*((60-30+(    (-40.0&#x2F;5)      *(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;]\n    before, nothing, after &#x3D; re.split(&#39;\\(([\\+\\-\\*\\&#x2F;]*\\d+\\.*\\d*)&#123;2,&#125;\\)&#39;,\n                                      expression, 1)\n\n    print(&#39;before：&#39;, expression)\n    content &#x3D; content[1:len(content) - 1]\n\n    # 计算，提取的表示 (-40.0&#x2F;5)，并活的结果，即：-40.0&#x2F;5&#x3D;-8.0\n    ret &#x3D; compute(content)\n\n    print(&#39;%s&#x3D;%s&#39; % (content, ret))\n\n    # 将执行结果拼接，[&#39;1-2*((60-30+(      -8.0     *(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;]\n    expression &#x3D; &quot;%s%s%s&quot; % (before, ret, after)\n    print(&#39;after：&#39;, expression)\n    print(&quot;&#x3D;&quot; * 10, &#39;上一次计算结束&#39;, &quot;&#x3D;&quot; * 10)\n\n    # 循环继续下次括号处理操作，本次携带者的是已被处理后的表达式，即：\n    # [&#39;1-2*((60-30+   -8.0  *(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;]\n\n    # 如此周而复始的操作，直到表达式中不再含有括号\n    return exec_bracket(expression)\n\n\n# 使用 __name__ 的目的：\n# 只有执行 python index.py 时，以下代码才执行\n# 如果其他人导入该模块，以下代码不执行\nif __name__ &#x3D;&#x3D; &quot;__main__&quot;:\n    print(\n        &#39;*&#39; * 20, &quot;请计算表达式：&quot;,\n        &quot;1 - 2 * ( (60-30 +(-40.0&#x2F;5) * (9-2*5&#x2F;3 + 7 &#x2F;3*99&#x2F;4*2998 +10 * 568&#x2F;14 )) - (-4*3)&#x2F; (16-3*2) )&quot;,\n        &#39;*&#39; * 20)\n    #     inpp &#x3D; &#39;1 - 2 * ( (60-30 +(-40.0&#x2F;5) * (9-2*5&#x2F;3 + 7 &#x2F;3*99&#x2F;4*2998 +10 * 568&#x2F;14 )) - (-4*3)&#x2F; (16-3*2) ) &#39;\n    inpp &#x3D; &#39;-1-2*((60+2*(-3-40.0+42425&#x2F;5)*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)&#39;\n    # inpp &#x3D; &quot;1-2*-30&#x2F;-12*(-20+200*-3&#x2F;-200*-300-100)&quot;\n    # inpp &#x3D; &quot;1-5*980.0&quot;\n    inpp &#x3D; re.sub(&#39;\\s*&#39;, &#39;&#39;, inpp)\n    # 表达式保存在列表中\n    result &#x3D; exec_bracket(inpp)\n    print(result)\n******************** 请计算表达式： 1 - 2 * ( (60-30 +(-40.0&#x2F;5) * (9-2*5&#x2F;3 + 7 &#x2F;3*99&#x2F;4*2998 +10 * 568&#x2F;14 )) - (-4*3)&#x2F; (16-3*2) ) ********************\nbefore： -1-2*((60+2*(-3-40.0+42425&#x2F;5)*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n-3-40.0+42425&#x2F;5&#x3D;8442.0\nafter： -1-2*((60+2*8442.0*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*((60+2*8442.0*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14&#x3D;16378.577154912598\nafter： -1-2*((60+2*8442.0*16378.577154912598)-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*((60+2*8442.0*16378.577154912598)-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n60+2*8442.0*16378.577154912598&#x3D;276535956.68354434\nafter： -1-2*(276535956.68354434-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*(276535956.68354434-(-4*3)&#x2F;(16-3*2))+56+(56-45)\n-4*3&#x3D;-12.0\nafter： -1-2*(276535956.68354434--12.0&#x2F;(16-3*2))+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*(276535956.68354434--12.0&#x2F;(16-3*2))+56+(56-45)\n16-3*2&#x3D;10.0\nafter： -1-2*(276535956.68354434--12.0&#x2F;10.0)+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*(276535956.68354434--12.0&#x2F;10.0)+56+(56-45)\n276535956.68354434--12.0&#x2F;10.0&#x3D;276535957.8835443\nafter： -1-2*276535957.8835443+56+(56-45)\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\nbefore： -1-2*276535957.8835443+56+(56-45)\n56-45&#x3D;11.0\nafter： -1-2*276535957.8835443+56+11.0\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 上一次计算结束 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n-553071849.7670887</code></pre>\n\n<h2 id=\"5-2-简单易懂版\"><a href=\"#5-2-简单易懂版\" class=\"headerlink\" title=\"5.2 简单易懂版\"></a>5.2 简单易懂版</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">Copyimport re\n\nexpression &#x3D; &#39;-1-2*((60+2*(-3-40.0+42425&#x2F;5)*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)&#39;\nquestion &#x3D; eval(expression)\nprint(question)\n\n\ndef arithmetic(expression&#x3D;&#39;1+1&#39;):\n    #     content &#x3D; re.search(&#39;\\(([\\-\\+\\*\\&#x2F;]*\\d+\\.?\\d*)+\\)&#39;, expression)  # (-3-40.0&#x2F;5)\n    content &#x3D; re.search(&#39;\\(([-+*&#x2F;]*\\d+\\.?\\d*)+\\)&#39;, expression)  # (-3-40.0&#x2F;5)\n    if content:\n        content &#x3D; content.group()\n        content &#x3D; content[1:-1]\n        print(&#39;content:&#39;, content)\n        replace_content &#x3D; next_arithmetic(content)\n        expression &#x3D; re.sub(&#39;\\(([-+*&#x2F;]*\\d+\\.?\\d*)+\\)&#39;,\n                            replace_content,\n                            expression,\n                            count&#x3D;1)\n        print(&#39;next_expression:&#39;, expression)\n    else:\n        answer &#x3D; next_arithmetic(expression)\n        return answer\n    return arithmetic(expression)\n\n\ndef next_arithmetic(content):\n    while True:\n        next_content_mul_div &#x3D; re.search(&#39;\\d+\\.?\\d*[*&#x2F;][-+]?\\d+\\.?\\d*&#39;,\n                                         content)  # 找出带有*&#x2F;的式子\n        if next_content_mul_div:  # 如果content含有带有*&#x2F;的式子\n            next_content_mul_div &#x3D; next_content_mul_div.group()\n            print(&#39;next_content_mul_div:&#39;, next_content_mul_div)\n            mul_div_content &#x3D; mul_div(next_content_mul_div)  # 计算出带有*&#x2F;的式子\n            print(&#39;mul_div_content:&#39;, mul_div_content)\n            content &#x3D; re.sub(&#39;\\d+\\.?\\d*[*&#x2F;][-+]?\\d+\\.?\\d*&#39;,\n                             str(mul_div_content),\n                             content,\n                             count&#x3D;1)  # 把带有*&#x2F;的式子计算出来后替换掉\n            print(&#39;content:&#39;, content)\n            continue\n        next_content_add_sub &#x3D; re.search(&#39;-?\\d+\\.?\\d*[-+][-+]?\\d+\\.?\\d*&#39;,\n                                         content)  # 找出带有-+的式子\n        if next_content_add_sub:  # 如果content含有带有+-的式子\n            next_content_add_sub &#x3D; next_content_add_sub.group()\n            print(&#39;next_content_add_sub:&#39;, next_content_add_sub)\n            add_sub_content &#x3D; add_sub(next_content_add_sub)  # 计算出带有-+的式子\n            print(&#39;add_sub_content:&#39;, add_sub_content)\n            add_sub_content &#x3D; str(add_sub_content)\n            content &#x3D; re.sub(&#39;-?\\d+\\.?\\d*[-+]-?\\d+\\.?\\d*&#39;,\n                             str(add_sub_content),\n                             content,\n                             count&#x3D;1)  # 把带有-+的式子计算出来后替换掉\n            print(&#39;content:&#39;, content)\n            continue\n        else:\n            break\n    return content\n\n\ndef add_sub(content):\n    if &#39;+&#39; in content:\n        content &#x3D; content.split(&#39;+&#39;)\n        print(content)\n        content &#x3D; float(content[0]) + float(content[1])\n        return content\n    elif &#39;-&#39; in content:\n        content &#x3D; content.split(&#39;-&#39;)\n        # 减法情况有多种\n        if content[0] &#x3D;&#x3D; &#39;-&#39; and content[2] &#x3D;&#x3D; &#39;-&#39;:\n            # content &#x3D; content.split(&#39;-&#39;)\n            print(content)\n            content &#x3D; -float(content[1]) - float(content[-1])\n            return content\n        if content[0] &#x3D;&#x3D; &#39;-&#39;:\n            # content &#x3D; content.split(&#39;-&#39;)\n            print(content)\n            content &#x3D; -float(content[1]) - float(content[-1])\n            return content\n        if content[1] &#x3D;&#x3D; &#39;-&#39; and content[2] &#x3D;&#x3D; &#39;-&#39;:\n            # content &#x3D; content.split(&#39;-&#39;)\n            print(content)\n            content &#x3D; -float(content[0]) + float(content[-1])\n            return content\n        if content[1] &#x3D;&#x3D; &#39;&#39;:\n            # content &#x3D; content.split(&#39;-&#39;)\n            print(content)\n            content &#x3D; float(content[0]) - float(content[2])\n            return content\n        if content[0] &#x3D;&#x3D; &#39;&#39; and content[2] !&#x3D; &#39;&#39;:\n            print(content)\n            content &#x3D; -float(content[1]) - float(content[2])\n            return content\n        if content[0] &#x3D;&#x3D; &#39;&#39; and content[2] &#x3D;&#x3D; &#39;&#39;:\n            print(content)\n            content &#x3D; -float(content[1]) + float(content[3])\n            return content\n        else:\n            # content &#x3D; content.split(&#39;-&#39;)\n            print(content)\n            content &#x3D; float(content[0]) - float(content[1])\n            return content\n\n\ndef mul_div(content):\n    if &#39;*&#39; in content:\n        content &#x3D; content.split(&#39;*&#39;)\n        print(content)\n        content &#x3D; float(content[0]) * float(content[1])\n        return content\n    elif &#39;&#x2F;&#39; in content:\n        content &#x3D; content.split(&#39;&#x2F;&#39;)\n        print(content)\n        content &#x3D; float(content[0]) &#x2F; float(content[1])\n        return content\n\n\n# expression &#x3D; &#39;1-2*((60+2*(-3-40.0&#x2F;5)*(9-2*5&#x2F;3+7&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))&#39;\nexpression &#x3D; &#39;-1-2*((60+2*(-3-40.0+42425&#x2F;5)*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)&#39;\nanswer &#x3D; arithmetic(expression)\nprint(answer)\nCopy-553071849.7670887\ncontent: -3-40.0+42425&#x2F;5\nnext_content_mul_div: 42425&#x2F;5\n[&#39;42425&#39;, &#39;5&#39;]\nmul_div_content: 8485.0\ncontent: -3-40.0+8485.0\nnext_content_add_sub: -3-40.0\n[&#39;&#39;, &#39;3&#39;, &#39;40.0&#39;]\nadd_sub_content: -43.0\ncontent: -43.0+8485.0\nnext_content_add_sub: -43.0+8485.0\n[&#39;-43.0&#39;, &#39;8485.0&#39;]\nadd_sub_content: 8442.0\ncontent: 8442.0\nnext_expression: -1-2*((60+2*8442.0*(9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14))-(-4*3)&#x2F;(16-3*2))+56+(56-45)\ncontent: 9-2*5&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 2*5\n[&#39;2&#39;, &#39;5&#39;]\nmul_div_content: 10.0\ncontent: 9-10.0&#x2F;3+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 10.0&#x2F;3\n[&#39;10.0&#39;, &#39;3&#39;]\nmul_div_content: 3.3333333333333335\ncontent: 9-3.3333333333333335+357&#x2F;553&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 357&#x2F;553\n[&#39;357&#39;, &#39;553&#39;]\nmul_div_content: 0.6455696202531646\ncontent: 9-3.3333333333333335+0.6455696202531646&#x2F;3*99&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 0.6455696202531646&#x2F;3\n[&#39;0.6455696202531646&#39;, &#39;3&#39;]\nmul_div_content: 0.21518987341772153\ncontent: 9-3.3333333333333335+0.21518987341772153*99&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 0.21518987341772153*99\n[&#39;0.21518987341772153&#39;, &#39;99&#39;]\nmul_div_content: 21.303797468354432\ncontent: 9-3.3333333333333335+21.303797468354432&#x2F;4*2998+10*568&#x2F;14\nnext_content_mul_div: 21.303797468354432&#x2F;4\n[&#39;21.303797468354432&#39;, &#39;4&#39;]\nmul_div_content: 5.325949367088608\ncontent: 9-3.3333333333333335+5.325949367088608*2998+10*568&#x2F;14\nnext_content_mul_div: 5.325949367088608*2998\n[&#39;5.325949367088608&#39;, &#39;2998&#39;]\nmul_div_content: 15967.196202531646\ncontent: 9-3.3333333333333335+15967.196202531646+10*568&#x2F;14\nnext_content_mul_div: 10*568\n[&#39;10&#39;, &#39;568&#39;]\nmul_div_content: 5680.0\ncontent: 9-3.3333333333333335+15967.196202531646+5680.0&#x2F;14\nnext_content_mul_div: 5680.0&#x2F;14\n[&#39;5680.0&#39;, &#39;14&#39;]\nmul_div_content: 405.7142857142857\ncontent: 9-3.3333333333333335+15967.196202531646+405.7142857142857\nnext_content_add_sub: 9-3.3333333333333335\n[&#39;9&#39;, &#39;3.3333333333333335&#39;]\nadd_sub_content: 5.666666666666666\ncontent: 5.666666666666666+15967.196202531646+405.7142857142857\nnext_content_add_sub: 5.666666666666666+15967.196202531646\n[&#39;5.666666666666666&#39;, &#39;15967.196202531646&#39;]\nadd_sub_content: 15972.862869198312\ncontent: 15972.862869198312+405.7142857142857\nnext_content_add_sub: 15972.862869198312+405.7142857142857\n[&#39;15972.862869198312&#39;, &#39;405.7142857142857&#39;]\nadd_sub_content: 16378.577154912598\ncontent: 16378.577154912598\nnext_expression: -1-2*((60+2*8442.0*16378.577154912598)-(-4*3)&#x2F;(16-3*2))+56+(56-45)\ncontent: 60+2*8442.0*16378.577154912598\nnext_content_mul_div: 2*8442.0\n[&#39;2&#39;, &#39;8442.0&#39;]\nmul_div_content: 16884.0\ncontent: 60+16884.0*16378.577154912598\nnext_content_mul_div: 16884.0*16378.577154912598\n[&#39;16884.0&#39;, &#39;16378.577154912598&#39;]\nmul_div_content: 276535896.68354434\ncontent: 60+276535896.68354434\nnext_content_add_sub: 60+276535896.68354434\n[&#39;60&#39;, &#39;276535896.68354434&#39;]\nadd_sub_content: 276535956.68354434\ncontent: 276535956.68354434\nnext_expression: -1-2*(276535956.68354434-(-4*3)&#x2F;(16-3*2))+56+(56-45)\ncontent: -4*3\nnext_content_mul_div: 4*3\n[&#39;4&#39;, &#39;3&#39;]\nmul_div_content: 12.0\ncontent: -12.0\nnext_expression: -1-2*(276535956.68354434--12.0&#x2F;(16-3*2))+56+(56-45)\ncontent: 16-3*2\nnext_content_mul_div: 3*2\n[&#39;3&#39;, &#39;2&#39;]\nmul_div_content: 6.0\ncontent: 16-6.0\nnext_content_add_sub: 16-6.0\n[&#39;16&#39;, &#39;6.0&#39;]\nadd_sub_content: 10.0\ncontent: 10.0\nnext_expression: -1-2*(276535956.68354434--12.0&#x2F;10.0)+56+(56-45)\ncontent: 276535956.68354434--12.0&#x2F;10.0\nnext_content_mul_div: 12.0&#x2F;10.0\n[&#39;12.0&#39;, &#39;10.0&#39;]\nmul_div_content: 1.2\ncontent: 276535956.68354434--1.2\nnext_content_add_sub: 276535956.68354434--1.2\n[&#39;276535956.68354434&#39;, &#39;&#39;, &#39;1.2&#39;]\nadd_sub_content: 276535955.48354435\ncontent: 276535955.48354435\nnext_expression: -1-2*276535955.48354435+56+(56-45)\ncontent: 56-45\nnext_content_add_sub: 56-45\n[&#39;56&#39;, &#39;45&#39;]\nadd_sub_content: 11.0\ncontent: 11.0\nnext_expression: -1-2*276535955.48354435+56+11.0\nnext_content_mul_div: 2*276535955.48354435\n[&#39;2&#39;, &#39;276535955.48354435&#39;]\nmul_div_content: 553071910.9670887\ncontent: -1-553071910.9670887+56+11.0\nnext_content_add_sub: -1-553071910.9670887\n[&#39;&#39;, &#39;1&#39;, &#39;553071910.9670887&#39;]\nadd_sub_content: -553071911.9670887\ncontent: -553071911.9670887+56+11.0\nnext_content_add_sub: -553071911.9670887+56\n[&#39;-553071911.9670887&#39;, &#39;56&#39;]\nadd_sub_content: -553071855.9670887\ncontent: -553071855.9670887+11.0\nnext_content_add_sub: -553071855.9670887+11.0\n[&#39;-553071855.9670887&#39;, &#39;11.0&#39;]\nadd_sub_content: -553071844.9670887\ncontent: -553071844.9670887\n-553071844.9670887</code></pre>\n", "text": "一、正则表达式正则表达式本身是一种小型的、高度专业化的编程语言，它并不是 Python 的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如 str 自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达...", "link": "", "photos": [], "count_time": {"symbolsCount": "37k", "symbolsTime": "33 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 3, "path": "api/categories/Python.json"}], "tags": [{"name": "持久化", "slug": "持久化", "count": 2, "path": "api/tags/持久化.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">一、正则表达式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-1-%E6%95%B0%E9%87%8F%E8%AF%8D%E7%9A%84%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E9%9D%9E%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1.1 数量词的贪婪模式与非贪婪模式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-2-%E5%8F%8D%E6%96%9C%E6%9D%A0%E7%9A%84%E5%9B%B0%E6%89%B0\"><span class=\"toc-text\">1.2 反斜杠的困扰</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-3-%E5%8C%B9%E9%85%8D%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">1.3 匹配模式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81re-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">二、re 模块的基本使用</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%89%E3%80%81re-%E6%A8%A1%E5%9D%97%E4%B8%AD%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">三、re 模块中常用功能函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-1-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%B8%A4%E7%A7%8D%E4%B9%A6%E5%86%99%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">3.1 正则表达式的两种书写方式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-2-re-compile-strPattern-flag-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.2 re.compile(strPattern[, flag])函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-1-re-S\"><span class=\"toc-text\">3.2.1 re.S</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-2-re-I\"><span class=\"toc-text\">3.2.2 re.I</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-3-re-M\"><span class=\"toc-text\">3.2.3 re.M</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-4-re-sub\"><span class=\"toc-text\">3.2.4 re.sub</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-3-re-match-pattern-string-flags-%E5%87%BD%E6%95%B0-%E5%B8%B8%E7%94%A8\"><span class=\"toc-text\">3.3 re.match(pattern, string[, flags])函数(常用)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-4-%E5%88%86%E7%BB%84%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.4 分组函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-5-re-search-pattern-string-flags-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.5 re.search(pattern, string[, flags])函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-6-re-findall-pattern-string-flags-%E5%87%BD%E6%95%B0-%E5%B8%B8%E7%94%A8\"><span class=\"toc-text\">3.6 re.findall(pattern, string[, flags])函数(常用)</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-7-re-split-pattern-string-maxsplit-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.7 re.split(pattern, string[, maxsplit])函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-8-re-sub-pattern-repl-string-count-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.8 re.sub(pattern, repl, string[, count])函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-9-re-subn-pattern-repl-string-count-flags-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">3.9 re.subn(pattern, repl, string,[, count][, flags])函数</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E3%80%81%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">四、注意事项</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%94%E3%80%81%E8%AE%A1%E7%AE%97%E5%99%A8-%E7%BB%8F%E5%85%B8\"><span class=\"toc-text\">五、计算器(经典)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-1-%E5%A4%8D%E6%9D%82%E7%89%88%E6%9C%AC\"><span class=\"toc-text\">5.1 复杂版本</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-2-%E7%AE%80%E5%8D%95%E6%98%93%E6%87%82%E7%89%88\"><span class=\"toc-text\">5.2 简单易懂版</span></a></li></ol></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}}