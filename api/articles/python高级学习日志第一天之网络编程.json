{"title": "python高级学习日志第一天之网络编程", "uid": "3ab3df2387b700f13887b79994864558", "slug": "python高级学习日志第一天之网络编程", "date": "2023-02-22 14:22:00", "updated": "2023-05-16 18:26:43.205000", "comments": true, "path": "api/articles/python高级学习日志第一天之网络编程.json", "keywords": null, "cover": [], "content": "<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h2 id=\"python高级学习日志第一天之网络编程\"><a href=\"#python高级学习日志第一天之网络编程\" class=\"headerlink\" title=\"python高级学习日志第一天之网络编程\"></a>python高级学习日志第一天之网络编程</h2><h3 id=\"UDP发送数据\"><a href=\"#UDP发送数据\" class=\"headerlink\" title=\"UDP发送数据\"></a>UDP发送数据</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一个Java程序员，但是打算自学一下python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。</p></blockquote>\n<p>哈哈，我喜欢边写程序边听歌</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>中国人民真蒸汽</p></blockquote>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=433107530&auto=0&height=66\"></iframe>\n\n<p>这里直接记录的是我的实践内容</p>\n<p><strong>首先是怎么利用简单的udp来发送数据？</strong></p>\n<p>这里我用的编辑工具是&#x3D;&#x3D; Pycharm &#x3D;&#x3D;<br>测试的工具是 &#x3D;&#x3D; 网络调试助手 &#x3D;&#x3D;<br>其中网络调试助手有多种样式的，下对了能用的就ok，我的就长这样子：<img src=\"https://img-blog.csdnimg.cn/20190106212353613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>利用udp进行简单的数据发送有四个步骤</p>\n<ol>\n<li>创建一个套接字</li>\n<li>从键盘读取你要发送的数据</li>\n<li>使用套接字发送你的数据</li>\n<li>关闭套接字</li>\n</ol>\n<p> 那么在python中要用到套接字，就像java导包一样也需要导入其中的套接字使用模块，使用Pycharm会自动提示不劝导入，真滴是特别的方便了。</p>\n<p>接着在最后的位置给python设置一个启动器(main方法)，类似，java里的</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">public static void main(String[] args)&#123;&#125;</code></pre>\n\n<p>python里的写法是main方法：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</code></pre>\n\n<p>在这个main函数缩进的位置上写上要执行的函数名就ok<br>按照刚刚说的流程走一遍：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">#引入套接字使用模块\nimport socket\n\n\n#自定义一个方法叫做main(),方法名随意\ndef main():\n    #1.创建一个套接字,叫做udp_socket,固定的创建写法\n    #其中SOCK_DGRAM是代表基于udp的套接字，无保障的\n    udp_socket&#x3D;socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    \n    #2.从键盘读取输入数据,赋值给send_data变量\n    send_data &#x3D; input(&quot;请输入要发送的数据:&quot;)\n\n    #3.使用套接字发送数据\n    #udp_socket套接字已经创建,用其自带的方法即可以实现发送,并且把发送的数据编码，防止中文输入乱码\n    udp_socket.sendto(send_data.encode(&quot;gbk&quot;), (&quot;10.128.246.239&quot;, 6666))\n   \n    #4.关闭套接字\n    udp_socket.close()\n   \n\n#在main方法里执行main()函数\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n    </code></pre>\n\n<p>ok,这是一个简单的流程，其中  10.128.246.239  和  6666 分别是要接受数据方的ip地址和端口号，接收方也是一个udp，只不过这个udp用来接收数据，在这里用网络调试助手来模拟接收数据的udp方。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：套接字的sendto方法需要带两个参数，第一个是发送的数据，是byte类型的，第二个参数是一个元组，类似java里的数组，(ip地址，端口号)，ip地址是字符串类型的，端口号是整型的。</p></blockquote>\n<p>接下来用网络调试助手模拟数据接收方，打开网络调试助手，如下<br><img src=\"https://img-blog.csdnimg.cn/20190106215312639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">新建一个udp<br><img src=\"https://img-blog.csdnimg.cn/20190106215359375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\">其中ip地址换成当前联网的ip，window下可以用win+R，输入cmd开启命令模式输入ipconfig即可查看当前网络的ip<br><img src=\"https://img-blog.csdnimg.cn/20190106215618224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>把这个ip地址输入到网络调试助手的设置区的本地ip位置，当然助手也能自动捕获，如图，用上这个就行<br><img src=\"https://img-blog.csdnimg.cn/20190106215854875.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>然后设置一个端口号，自己设置就行了，大于1024小于65535就行，排除电脑上有程序在用这个端口以外。启动，最终如下图，<br><img src=\"https://img-blog.csdnimg.cn/20190106220020862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>这个时候通过代码里的参数配置，已经可以连接上这个接收器了，运行python程序<br><img src=\"https://img-blog.csdnimg.cn/20190106220213861.png\" alt=\"在这里插入图片描述\"><br>点绿色按钮选择运行即可,运行如图：<br><img src=\"https://img-blog.csdnimg.cn/20190106220352802.png\" alt=\"在这里插入图片描述\"><br>然后输入数据测试发送，输入后回车。<br><img src=\"https://img-blog.csdnimg.cn/20190106220442349.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>这个时候回到网络调试助手可以看到：<br><img src=\"https://img-blog.csdnimg.cn/20190106220529883.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>来自本机地址，因为是自己发给自己测试，这个端口发来的这个数据。</p>\n<p><strong>这个时候开始想，能不能循环输入数据发送？</strong><br>答案是可以的，把发送数据执行的代码片作为循环体即可。然后可以简单地设置一下，当用户输入“exit”的时候，让用户结束发送。<br>然后代码变成了这样，把从键盘获取数据到发送数据作为循环体。用while True: 圈起来，也就是把循环体一段缩进，相当于java中的{}大括号。然后用if判断用户输入的是不是exit字符串，是的话，则跳出循环，直接执行关闭套接字操作，程序运行结束。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import socket\n\n\ndef main():\n    # 创建一个udp套接字\n    udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    while True:\n        # 从键盘获取数据\n        send_data &#x3D; input(&quot;请输入要发送的数据:&quot;)\n        # 如果输入的数据是exit。则推出程序\n        if send_data &#x3D;&#x3D; &quot;exit&quot;:\n            break\n        # 使用套接字发送数据\n        udp_socket.sendto(send_data.encode(&quot;gbk&quot;), (&quot;10.128.246.239&quot;, 6666))\n    # 关闭套接字\n    udp_socket.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意，if里也用了缩进，就相当于java的{}</p></blockquote>\n<p>运行程序:<br><img src=\"https://img-blog.csdnimg.cn/20190106221413209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>这个时候，可以循环发送数据。打开网络调试助手：<br><img src=\"https://img-blog.csdnimg.cn/20190106221456114.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>它也循环收到了数据<br>如果输入“exit”<br><img src=\"https://img-blog.csdnimg.cn/20190106221601628.png\" alt=\"在这里插入图片描述\"><br>退出程序，结束发送。</p>\n<p>这里我们可能会注意到这个细节<br><img src=\"https://img-blog.csdnimg.cn/20190106221712480.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>有两种端口，这个是因为代码运行了两次，每次运行都由操作系统随机分配端口，总而言之，一个应用程序需要运行，则需要一个端口，当然在代码里也可以绑定端口，套接字绑定端口的操作会在udp接收数据里记录。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>小白新学python之网络编程入门，大神勿喷<br>下一次记录<br><strong>怎么利用udp接收数据？</strong></p></blockquote>\n", "text": " python高级学习日志第一天之网络编程UDP发送数据 一个Java程序员，但是打算自学一下python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。 哈哈，我喜欢边写程序边听歌 中国人民真蒸汽 这里直接记录的是我的实践内容 首先是怎么利用...", "link": "", "photos": [], "count_time": {"symbolsCount": "2.7k", "symbolsTime": "2 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 2, "path": "api/categories/Python.json"}], "tags": [{"name": "Python网络编程", "slug": "Python网络编程", "count": 2, "path": "api/tags/Python网络编程.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E7%AC%AC%E4%B8%80%E5%A4%A9%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">python高级学习日志第一天之网络编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UDP%E5%8F%91%E9%80%81%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">UDP发送数据</span></a></li></ol></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true, "prev_post": {"title": "可重入锁ReentrantLock高级特性", "uid": "2e5004b8a8ff49317aa7f3e9b71f74cf", "slug": "reentrant-lock", "date": "2023-05-08 07:05:39", "updated": "2023-05-16 18:26:43.205000", "comments": true, "path": "api/articles/reentrant-lock.json", "keywords": null, "cover": "/img/reentrant-lock/reentrant-lock.webp", "text": "ReentrantLock提供了Synchronized不具备的三个高级特性 公平锁 &#x2F;** * Creates an instance of &#123;@code ReentrantLock&#125;. * This is equivalent to using ...", "link": "", "photos": [], "count_time": {"symbolsCount": "3.7k", "symbolsTime": "3 mins."}, "categories": [{"name": "分布式", "slug": "分布式", "count": 1, "path": "api/categories/分布式.json"}], "tags": [{"name": "ReentrantLock", "slug": "ReentrantLock", "count": 1, "path": "api/tags/ReentrantLock.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, "next_post": {"title": "【Java】java23种设计模式案例之命令模式", "uid": "99f059eccc4d62d721a5fd588d745cd9", "slug": "【Java】java23种设计模式案例之命令模式", "date": "2022-12-01 10:50:00", "updated": "2023-05-16 18:26:43.205000", "comments": true, "path": "api/articles/【Java】java23种设计模式案例之命令模式.json", "keywords": null, "cover": [], "content": "<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h2 id=\"【Java】java23种设计模式案例之命令模式\"><a href=\"#【Java】java23种设计模式案例之命令模式\" class=\"headerlink\" title=\"【Java】java23种设计模式案例之命令模式\"></a>【Java】java23种设计模式案例之命令模式</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><a href=\"http://www.runoob.com/design-pattern/command-pattern.html\">命令模式定义参考</a></p></blockquote>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>例子:              <a href=\"https://github.com/LAGoonwe/Commandmode\">源代码</a></p></blockquote>\n<p>3种案例<br><img src=\"https://img-blog.csdnimg.cn/20190328202229793.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.Command案例<br>问题描述：一个指挥官请求（命令）三连偷袭敌人<br>代码</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.command;\n\n&#x2F;**\n * 问题描述：一个指挥官请求（命令）三连偷袭敌人\n * 这个类扮演的是接收者角色\n *&#x2F;\npublic class CompanyArmy &#123;\n\n    public void sneakAttack()&#123;\n        System.out.println(&quot;我们知道如何偷袭敌人，保证完成任务！&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.command;\n\n&#x2F;**\n * 这个接口扮演的是命令接口角色\n *&#x2F;\npublic interface Command &#123;\n    public abstract void execute();\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.command;\n\n&#x2F;**\n * 这个类扮演的是具体命令的角色\n *&#x2F;\npublic class ConcreteCommand implements Command&#123;\n\n    CompanyArmy companyArmy;  &#x2F;&#x2F;含有接收者的引用\n    ConcreteCommand(CompanyArmy companyArmy)&#123;\n        this.companyArmy&#x3D;companyArmy;\n    &#125;\n\n    @Override\n    public void execute() &#123;  &#x2F;&#x2F;封装着指挥官的请求\n        companyArmy.sneakAttack();  &#x2F;&#x2F;偷袭敌人\n\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.command;\n\n&#x2F;**\n * 这个类代表请求者，也就是指挥官的角色\n *&#x2F;\npublic class ArmySuperior &#123;\n\n    Command command;  &#x2F;&#x2F;用来存放具体命令的引用\n    public void setCommand(Command command)&#123;\n        this.command&#x3D;command;\n    &#125;\n    public void startExecuteCommand()&#123;\n        command.execute();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.command;\n\n&#x2F;**\n * 该类为main方法，演示一个指挥官下发命令如何请求三连偷袭敌人\n *&#x2F;\npublic class Application &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;创建接收者\n        CompanyArmy 三连&#x3D;new CompanyArmy();\n        &#x2F;&#x2F;创建具体命令并指定接收者\n        Command command&#x3D;new ConcreteCommand(三连);\n        &#x2F;&#x2F;创建请求者\n        ArmySuperior 指挥官&#x3D;new ArmySuperior();\n        &#x2F;&#x2F;下发命令\n        指挥官.setCommand(command);\n        &#x2F;&#x2F;开始执行命令\n        指挥官.startExecuteCommand();\n        &#x2F;&#x2F;执行结果：输出语句，我们知道如何偷袭敌人，保证完成任务！\n    &#125;\n&#125;\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>2.Dir命令，演示命令模式的可撤销操作<br>问题描述：该问题描述的是请求者请求在硬盘上建立目录，还可以撤销请求，这就要求接收者不仅可以在硬盘上建立目录，也可以删除上一次请求所建立的目录<br>代码：</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Dir;\n\n&#x2F;**\n * 该问题描述的是请求者请求在硬盘上建立目录，还可以撤销请求，这就要求接收者不仅可以在硬盘上建立目录，也可以删除上一次请求所建立的目录\n * 该类扮演的是接收者角色，即既可以新增目录，也可以删除目录\n *&#x2F;\nimport java.io.*;\npublic class MakeDir &#123;\n    public void createDir(String name)&#123;\n        File dir&#x3D;new File(name);\n        dir.mkdir();\n    &#125;\n\n    public void deleteDir(String name)&#123;\n        File dir&#x3D;new File(name);\n        dir.delete();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Dir;\n\n&#x2F;**\n * 该类为命令接口类,代表既可以执行命令，也可以撤销收回命令\n *&#x2F;\npublic interface Command &#123;\n    public abstract void execute(String name);\n    public abstract void undo();\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Dir;\n\nimport java.util.ArrayList;\n\n&#x2F;**\n *该类为具体命令类\n *&#x2F;\npublic class ConcreteCommand implements Command&#123;\n    ArrayList&lt;String&gt; dirNameList;\n    MakeDir makeDir;\n    ConcreteCommand(MakeDir makeDir)&#123;\n        dirNameList&#x3D;new ArrayList&lt;String&gt;();\n        this.makeDir&#x3D;makeDir;\n    &#125;\n    @Override\n    public void execute(String name) &#123;\n        makeDir.createDir(name);\n        dirNameList.add(name);\n\n    &#125;\n\n    @Override\n    public void undo() &#123;\n        if (dirNameList.size()&gt;0)&#123;\n            int m&#x3D;dirNameList.size();\n            String str&#x3D;dirNameList.get(m-1);\n            makeDir.deleteDir(str);\n            dirNameList.remove(m-1);\n        &#125;\n        else\n            System.out.println(&quot;没有需要撤销的操作&quot;);\n\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Dir;\n\n&#x2F;**\n * 该类为请求者角色\n *&#x2F;\npublic class RequestMakeDir &#123;\n    Command command;\n    public void setCommand(Command command)&#123;\n        this.command&#x3D;command;\n    &#125;\n    public void startExecuteCommand(String name)&#123;\n        command.execute(name);\n    &#125;\n    public void undoCommand()&#123;\n        command.undo();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Dir;\n\nimport java.util.Iterator;\n\n&#x2F;**\n * 该类为发射类\n *&#x2F;\npublic class Application &#123;\n    public static void main(String[] args) &#123;\n        &#x2F;&#x2F;创建接收者\n        MakeDir makeDir&#x3D;new MakeDir();\n        &#x2F;&#x2F;创建具体命令并指定接收者\n        Command command&#x3D;new ConcreteCommand(makeDir);\n        RequestMakeDir requestMakeDir&#x3D;new RequestMakeDir();\n        requestMakeDir.setCommand(command);\n        &#x2F;&#x2F;建立名字是java的目录\n        requestMakeDir.startExecuteCommand(&quot;java&quot;);\n        &#x2F;&#x2F;建立名字是c的目录\n        requestMakeDir.startExecuteCommand(&quot;c&quot;);\n        &#x2F;&#x2F;建立名字是c++的目录\n        requestMakeDir.startExecuteCommand(&quot;c++&quot;);\n        &#x2F;&#x2F;撤销命令，删除名字是c++的目录\n        requestMakeDir.undoCommand();\n        &#x2F;&#x2F;撤销命令，删除名字是c的目录\n        requestMakeDir.undoCommand();\n\n        &#x2F;&#x2F;查看当前列表里的目录\n        Iterator&lt;String&gt; iterator &#x3D; ((ConcreteCommand) command).dirNameList.iterator();\n        if (iterator.hasNext())&#123;\n            System.out.println(iterator.next());\n        &#125;\n\n        &#x2F;&#x2F;运行结果，输出一个列表目录，java，说明其他被撤销成功\n    &#125;\n&#125;\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>3.Letter案例<br>问题描述：请求者可以请求只输出英文字母表，俄文字母表或1-n之间的偶数<br> 也可以请求三种都输出<br> 代码：</p></blockquote>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\n&#x2F;**\n * 该文件夹演示宏命令\n * 宏命令也是一个具体命令，只不过他包含了其他命令的引用\n * 执行一个宏命令，相当于执行了许多的具体命令\n * 该类为接收者角色\n * 问题描述：请求者可以请求只输出英文字母表，俄文字母表或1-n之间的偶数\n * 也可以请求三种都输出\n *&#x2F;\npublic class PrintLetter &#123;\n    public void printEnglish()&#123;\n        for (char c&#x3D;&#39;a&#39;;c&lt;&#x3D;&#39;z&#39;;c++)&#123;\n            System.out.println(&quot; &quot;+c);\n        &#125;\n    &#125;\n\n    public void printRussian()&#123;\n        for (char c&#x3D;&#39;а&#39;;c&lt;&#x3D;&#39;я&#39;;c++)&#123;\n            System.out.println(&quot; &quot;+c);\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\n&#x2F;**\n * 命令接口类\n *&#x2F;\npublic interface Command &#123;\n    public abstract void execute();\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\n&#x2F;&#x2F;具体命令之输出英文字母表命令\npublic class PrintEnglishCommand implements Command&#123;\n    PrintLetter letter;\n\n    public PrintEnglishCommand(PrintLetter letter) &#123;\n        this.letter &#x3D; letter;\n    &#125;\n    public void execute()&#123;\n        letter.printEnglish();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\n&#x2F;&#x2F;具体命令之输出俄文字母表\npublic class PrintRussianCommand implements Command&#123;\n    PrintLetter letter;\n\n    public PrintRussianCommand(PrintLetter letter) &#123;\n        this.letter &#x3D; letter;\n    &#125;\n\n    @Override\n    public void execute() &#123;\n        letter.printRussian();\n    &#125;\n\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\nimport java.util.ArrayList;\n\n&#x2F;&#x2F;宏命令，执行所有命令\npublic class MacroCommand implements Command&#123;\n\n    ArrayList&lt;Command&gt; commandArrayList;  &#x2F;&#x2F;把所有的命令存进数组\n\n    public MacroCommand(ArrayList&lt;Command&gt; commandArrayList) &#123;\n        this.commandArrayList &#x3D; commandArrayList;\n    &#125;\n\n    @Override\n    public void execute() &#123;\n        for (int k&#x3D;0;k&lt;commandArrayList.size();k++)&#123;\n            Command command&#x3D;commandArrayList.get(k);  &#x2F;&#x2F;循环定位到命令\n            command.execute(); &#x2F;&#x2F;执行命令\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\n&#x2F;&#x2F;该类为请求者角色\npublic class RequestMakedir &#123;\n    Command command;\n\n    public void setCommand(Command command) &#123;\n        this.command &#x3D; command;\n    &#125;\n    public void startExecuteCommand()&#123;\n        command.execute();\n    &#125;\n&#125;\n</code></pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.Letter;\n\nimport java.util.ArrayList;\n\n&#x2F;&#x2F;发射类，main方法\npublic class Application &#123;\n    public static void main(String[] args) &#123;\n        ArrayList&lt;Command&gt; list&#x3D; new ArrayList&lt;&gt;();\n        &#x2F;&#x2F;创建请求者\n        RequestMakedir requestMakedir&#x3D;new RequestMakedir();\n        &#x2F;&#x2F;创建命令具体接收者\n        Command command1&#x3D;new PrintEnglishCommand(new PrintLetter());\n        Command command2&#x3D;new PrintRussianCommand(new PrintLetter());\n\n        &#x2F;&#x2F;整合命令\n        list.add(command1);\n        list.add(command2);\n\n\n        &#x2F;&#x2F;创宏命令\n        Command macroCommand&#x3D;new MacroCommand(list);\n\n        System.out.println(&quot;单独输出英文字母表:&quot;);\n        requestMakedir.setCommand(command1);\n        requestMakedir.startExecuteCommand();\n\n        System.out.printf(&quot;%n用一个宏命令输出所有:%n&quot;);\n        requestMakedir.setCommand(macroCommand);\n        requestMakedir.startExecuteCommand();\n    &#125;\n&#125;\n</code></pre>\n", "feature": true, "text": " 【Java】java23种设计模式案例之命令模式 命令模式定义参考 例子: 源代码 3种案例 1.Command案例问题描述：一个指挥官请求（命令）三连偷袭敌人代码 package com.lagoon.command; &#x2F;** * 问题描述：一个指挥官请求（命令）三...", "link": "", "photos": [], "count_time": {"symbolsCount": "8.3k", "symbolsTime": "8 mins."}, "categories": [{"name": "Java", "slug": "Java", "count": 2, "path": "api/categories/Java.json"}], "tags": [{"name": "设计模式", "slug": "设计模式", "count": 1, "path": "api/tags/设计模式.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E3%80%90Java%E3%80%91java23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A1%88%E4%BE%8B%E4%B9%8B%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\">【Java】java23种设计模式案例之命令模式</span></a></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}}