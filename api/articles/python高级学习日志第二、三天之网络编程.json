{"title": "python高级学习日志第二、三天之网络编程", "uid": "e266b70dd1da3efc040f3fd65a612a8c", "slug": "python高级学习日志第二、三天之网络编程", "date": "2022-10-01 09:29:00", "updated": "2023-05-16 18:56:06.728000", "comments": true, "path": "api/articles/python高级学习日志第二、三天之网络编程.json", "keywords": null, "cover": "/img/python高级学习日志第二、三天之网络编程/python高级学习日志第二、三天之网络编程.webp", "content": "<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h2 id=\"python高级学习日志第二、三天之网络编程\"><a href=\"#python高级学习日志第二、三天之网络编程\" class=\"headerlink\" title=\"python高级学习日志第二、三天之网络编程\"></a>python高级学习日志第二、三天之网络编程</h2><h3 id=\"UDP接收数据以及基于UDP的交易聊天器\"><a href=\"#UDP接收数据以及基于UDP的交易聊天器\" class=\"headerlink\" title=\"UDP接收数据以及基于UDP的交易聊天器\"></a>UDP接收数据以及基于UDP的交易聊天器</h3><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>一个Java程序员，但是打算自学一下python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。</p></blockquote>\n<p>哈哈，我喜欢边写程序边听歌</p>\n<iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=86 src=\"//music.163.com/outchain/player?type=2&id=502839372&auto=0&height=66\"></iframe>\n\n<p>上次记录的是怎么用udp来发送数据，通过网络调试助手按钮来模拟数据接收方，这次记录的是利用udp代码来接收数据，以及基于两份python代码的简易聊天器。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>话不多说直接开搞</p></blockquote>\n<p>首先是单纯的用udp来接收数据，这里同样用网络调试助手来模拟发送数据，这个时候网络调试助手扮演的角色是发送数据方。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>利用udp接收数据有以下几个主要步骤：</p></blockquote>\n<ol>\n<li>创建套接字</li>\n<li>绑定本地信息，包括本地ip以及分配端口号</li>\n<li>接收数据</li>\n<li>打印接收到的数据</li>\n<li>关闭套接字</li>\n</ol>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import socket\n\n\ndef main():\n    # 1.创建套接字\n    udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    # 2.绑定一个本地信息，分配端口号\n    localaddr &#x3D; (&quot;&quot;, 7788)\n    udp_socket.bind(localaddr)\n    # 3.接收数据\n    recv_data &#x3D; udp_socket.recvfrom(1024)\n    # 4.打印接收到的数据\n    print(recv_data)\n    # 5.关闭套接字\n    udp_socket.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在绑定本地信息过程中，套接字调用bind()方法，其中绑定的内容是一个元组，(“,xxxx),元组的第一个值为本地ip，不用些即可，代码运行时会自动填充，第二个是手动给这个接收的代码片运行分配一个端口号，可在1024至65535之间随意填写，除本机有程序已经在占用这个端口使用以外，这里我随机绑定的端口号是7788，至于元组的第一个元素为什么带有引号，是因为他是一个字符串类型的参数。<br>绑定好本地信息以后准备接受来自其它udp发送来的数据<br>recv_data &#x3D; udp_socket.recvfrom(1024)<br>调用套接字的recvfrom方法，1024是指最大接收的数据量，这里用1Kb测试，最后把接收到的数据存进变量<br>recv_data里，然后运行程序：<br><img src=\"https://img-blog.csdnimg.cn/20190108142647212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>此时没有任何动作是因为程序正在等待接收数据<br>然后打开网络调试助手新建一个udp来模拟发送数据<br><img src=\"https://img-blog.csdnimg.cn/20190108142911501.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>同样的把相关配置做好，1号处填上本地的ip地址，2好处给网络调试助手启动服务器分配一个端口，3号处也是填上本地ip地址，因为是同一台电脑发送数据和接收数据，4号处填上代码里绑定的端口号，也就是python代码运行分配的端口号，所以整个过程相当于启动网络调试助手的udp作为数据发送方，然后填好要发给的另一方的信息。启动调试助手：<br><img src=\"https://img-blog.csdnimg.cn/20190108143524867.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>输入测试发送的信息点击发送：<br><img src=\"https://img-blog.csdnimg.cn/2019010814362627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>回到代码运行处查看：<br><img src=\"https://img-blog.csdnimg.cn/20190108143653739.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>可以看到显示的是一个大元组，大元组的第一个袁术是接收到的数据，在这里是中文的ASCII码，时byte类型的数据，然后后面跟着一组小元组，小元组的内容显而易见，小元组的第一个元素是数据发送方的ip，第二个元素是数据发送方的端口号。接下来对代码做一些改变：</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import socket\n\n\ndef main():\n    # 1.创建套接字\n    udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    # 2.绑定一个本地信息，分配端口号\n    localaddr &#x3D; (&quot;&quot;, 7788)\n    udp_socket.bind(localaddr)\n    # 3.接收数据\n\n    recv_data &#x3D; udp_socket.recvfrom(1024)\n    # 解析元祖的消息内容\n    recv_msg &#x3D; recv_data[0]  # 存储接收到的数据\n    send_addr &#x3D; recv_data[1]  # 存储发送方的地址信息\n    # 4.打印接收到的数据\n    print(&quot;%s说:%s&quot; % (str(send_addr), recv_msg.decode(&quot;gbk&quot;)))\n    # 5.关闭套接字\n    udp_socket.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>把原本的recv_data做一个拆分解析，把recv_data的第一个元素赋值给recv_msg，表示收到的消息和数据。把recv_data的第二个元素赋值给send_addr，是一个小元组，表示发送方的信息，其过程和java数组取值类似，最后分别做输出，需要注意的是，str强转和接收到的数据转码。最后重新运行程序：<br><img src=\"https://img-blog.csdnimg.cn/20190108144956841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>等待收数据，然后在调试助手输入发送的数据：<br><img src=\"https://img-blog.csdnimg.cn/20190108145034234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>则代码最后运行结果如下：<br><img src=\"https://img-blog.csdnimg.cn/20190108145056413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>以上这种情况可以看出是收到一条数据则结束程序运行。<br>接下来对代码进行改进能让代码持续收到书：</p></blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import socket\n\n\ndef main():\n    # 1.创建套接字\n    udp_socket &#x3D; socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    # 2.绑定一个本地信息，分配端口号\n    localaddr &#x3D; (&quot;&quot;, 7788)\n    udp_socket.bind(localaddr)\n    # 3.循环接收数据\n    while True:\n        recv_data &#x3D; udp_socket.recvfrom(1024)\n        # 解析元祖的消息内容\n        recv_msg &#x3D; recv_data[0]  # 存储接收到的数据\n        send_addr &#x3D; recv_data[1]  # 存储发送方的地址信息\n        # 4.打印接收到的数据\n        print(&quot;%s说:%s&quot; % (str(send_addr), recv_msg.decode(&quot;gbk&quot;)))\n    # 5.关闭套接字\n    udp_socket.close()\n\n\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()\n</code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>可以看出是将套接字收数据和打印数据作为循环体来循环，这个时候测试数据接收如下：<br><img src=\"https://img-blog.csdnimg.cn/20190108145507304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>在网络调试助手连续发送三条信息，代码运行都够收到以后，程序并未退出这个时候就做到了持续等待收数据和信息的效果。</p></blockquote>\n<p>学习了udp收发数据以后，可以做一个基于udp的简单聊天器了，这个聊天器是发一句收一句的，因为还没有采取多线程的处理方式。具体代码如下，这个时候就不需要调试助手来充当角色了：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import socket\n\ndef send_msg(udp_scoket,dest_ip,dest_port):\n    &quot;&quot;&quot;&quot;发送消息&quot;&quot;&quot;\n    #获取要发送的内容\n    send_data&#x3D;input(&quot;请输入要发送的消息:&quot;)\n    udp_scoket.sendto(send_data.encode(&quot;gbk&quot;), (dest_ip, int(dest_port)))\n\n\ndef recv_msg(udp_scoket):\n    &quot;&quot;&quot;&quot;接收消息&quot;&quot;&quot;\n    recv_data&#x3D;udp_scoket.recvfrom(1024)\n    print(&quot;%s回消息说:%s&quot; %(str(recv_data[1]),recv_data[0].decode(&quot;gbk&quot;)))\n\n\ndef main():\n    #创建套接字\n    udp_scoket&#x3D;socket.socket(socket.AF_INET,socket.SOCK_DGRAM)\n\n    #绑定信息\n    #绑定的是一个元组，里面存放ip信息和端口信息\n    udp_scoket.bind((&quot;&quot;,7788))\n    # 确定对方地址\n    dest_ip &#x3D; input(&quot;请输入对方的ip:&quot;)\n    dest_port &#x3D; input(&quot;请输入对方的port:&quot;)\n\n    #循环发送接收消息\n    while True:\n            #发送\n            send_msg(udp_scoket,dest_ip,dest_port)\n\n            #接受并显示\n            recv_msg(udp_scoket)\nif __name__ &#x3D;&#x3D; &#39;__main__&#39;:\n    main()</code></pre>\n\n<p>这里测试自己收发<br>程序运行如下：<br><img src=\"https://img-blog.csdnimg.cn/20190108150039481.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwOTQ4Nzk1,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>可以看出是做到了自己收发消息了的，即在一个程序里，自己发送数据给自己自己接收数据并打印显示，当然也可以用两份程序分别演示一个发送数据，一个接收数据。具体看自己怎么理解和操作。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>下一次记录tcp的有关知识和实践</p></blockquote>\n", "text": " python高级学习日志第二、三天之网络编程UDP接收数据以及基于UDP的交易聊天器 一个Java程序员，但是打算自学一下python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。 哈哈，我喜欢边写程序边听歌 上次记录的是怎么用udp来发送...", "link": "", "photos": [], "count_time": {"symbolsCount": "4.2k", "symbolsTime": "4 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 2, "path": "api/categories/Python.json"}], "tags": [{"name": "Python网络编程", "slug": "Python网络编程", "count": 2, "path": "api/tags/Python网络编程.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#python%E9%AB%98%E7%BA%A7%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97%E7%AC%AC%E4%BA%8C%E3%80%81%E4%B8%89%E5%A4%A9%E4%B9%8B%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B\"><span class=\"toc-text\">python高级学习日志第二、三天之网络编程</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#UDP%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE%E4%BB%A5%E5%8F%8A%E5%9F%BA%E4%BA%8EUDP%E7%9A%84%E4%BA%A4%E6%98%93%E8%81%8A%E5%A4%A9%E5%99%A8\"><span class=\"toc-text\">UDP接收数据以及基于UDP的交易聊天器</span></a></li></ol></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true, "prev_post": {"title": "python高级学习日志第一天之网络编程", "uid": "3ab3df2387b700f13887b79994864558", "slug": "python高级学习日志第一天之网络编程", "date": "2023-02-22 14:22:00", "updated": "2023-05-16 18:53:49.219000", "comments": true, "path": "api/articles/python高级学习日志第一天之网络编程.json", "keywords": null, "cover": "/img/python高级学习日志第一天之网络编程/python高级学习日志第一天之网络编程.webp", "text": " python高级学习日志第一天之网络编程UDP发送数据 一个Java程序员，但是打算自学一下python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。 哈哈，我喜欢边写程序边听歌 中国人民真蒸汽 这里直接记录的是我的实践内容 首先是怎么利用...", "link": "", "photos": [], "count_time": {"symbolsCount": "2.7k", "symbolsTime": "2 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 2, "path": "api/categories/Python.json"}], "tags": [{"name": "Python网络编程", "slug": "Python网络编程", "count": 2, "path": "api/tags/Python网络编程.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, "next_post": {"title": "jvm学习笔记之类的加载、连接与初始化", "uid": "cb1bde52f4b0429979650f547c40a9be", "slug": "jvm学习笔记之类的加载、连接与初始化——2019-04-04", "date": "2021-07-09 11:39:11", "updated": "2023-05-16 18:53:33.710000", "comments": true, "path": "api/articles/jvm学习笔记之类的加载、连接与初始化——2019-04-04.json", "keywords": null, "cover": "/img/jvm学习笔记之类的加载、连接与初始化——2019-04-04/jvm学习笔记之类的加载、连接与初始化——2019-04-04.webp", "content": "<meta name=\"referrer\" content=\"no-referrer\" />\n\n<h3 id=\"jvm学习笔记之类的加载、连接与初始化——2019-04-04\"><a href=\"#jvm学习笔记之类的加载、连接与初始化——2019-04-04\" class=\"headerlink\" title=\"jvm学习笔记之类的加载、连接与初始化——2019-04-04\"></a>jvm学习笔记之类的加载、连接与初始化——2019-04-04</h3><h4 id=\"类的加载、连接与初始化\"><a href=\"#类的加载、连接与初始化\" class=\"headerlink\" title=\"类的加载、连接与初始化\"></a>类的加载、连接与初始化</h4><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><ol>\n<li>加载：查找并加载类的二进制数据</li>\n<li>连接<ol>\n<li>验证：确保被加载类的正确性</li>\n<li>准备：为类的静态变量分配内存，并将其初始化为默认值</li>\n<li>解析：把类中的符号引用转换为直接引用</li>\n</ol>\n</li>\n<li>初始化：为类的静态变量赋予正确的初始值</li>\n</ol></blockquote>\n<p>如：<br>Class test{<br>     Public static int a&#x3D;1;<br>}<br>在test类在被加载时，静态变量a首先被分配内存，设置默认值a&#x3D;0<br>接着在初始化过程中才被赋予正确的初始值a&#x3D;1</p>\n<p>Java程序对类的使用方式可分为两种</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>主动使用<br>被动使用</p></blockquote>\n<p>所有的Java虚拟机实现必须在每个类或接口被Java程序“首次主动使用”时才能初始化他们</p>\n<p>主动使用（七种）<br> 创建类的实例（new一个类对象）<br> 访问某个类或接口的静态变量，或者对该静态变量赋值（对静态变量取值赋值）<br>助记符 getstatic  putstatic<br> 调用类的静态方法  助记符 invokestatic<br> 反射（如Class.forName(“com.test.Test”)）<br> 初始化一个类的子类<br>如：<br>Class Parent{}<br>Class Child extends Parent{}<br>当子类被初始化时，同时也标记着父类的主动使用，父类也会被初始化<br> Java虚拟机启动时被标明为启动类的类（Java Test）<br> JDK1.7开始提供的动态语言支持<br>Java.lang.invoke.MethodHandle实例的解析结果REF_getStatic, REF_putStatic, REF_invokeStatic句柄对应的类没有初始化，则初始化</p>\n<p>除了以上七种情况，其它使用java类的方式都被看作是对类的被动使用，都不会导致类的初始化</p>\n<p>类的加载<br>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象（规范并未说明Class对象位于哪里，大致上放在堆区，HotSpot虚拟机将其放在了方法区中）用来封装类在方法区内的数据结构</p>\n<p> 加载.class文件的方式</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p> 从本地系统中直接加载（ide工作区重启加载项目即是如此）<br> 通过网络下载.class文件<br> 从zip，jar等归档文件中加载.class文件<br> 从专有数据库中提取.class文件<br> 将Java源文件动态编译为.class文件（如JSP中java代码的编写，实际上是转化成了Servlet）</p></blockquote>\n<p>（主动使用）<br>测试代码一</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.jvm.classloder;\n\npublic class MyTest1 &#123;\n\n    public static void main(String[] args) &#123;\n        System.out.println(MyChild1.str);\n    &#125;\n&#125;\n\nclass MyParent1&#123;\n\n    public static String str&#x3D;&quot;hello world&quot;;\n\n    static &#123;\n        System.out.println(&quot;MyParent1 static block&quot;);\n    &#125;\n&#125;\n\nclass MyChild1 extends MyParent1&#123;\n    static &#123;\n        System.out.println(&quot;MyChild1 static block&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<p>测试结果<br><img src=\"https://img-blog.csdnimg.cn/20190404225143742.png\" alt=\"在这里插入图片描述\"></p>\n<p>并没有输出MyChild1 static block<br>这种情况称之为对MyParent1的一个主动使用，但是并没有对MyChild1进行主动使用<br>所以并不会对MyChild1进行初始化，也就不会执行静态代码块</p>\n<p>测试代码二</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.jvm.classloder;\n\npublic class MyTest1 &#123;\n\n    public static void main(String[] args) &#123;\n        System.out.println(MyChild1.str2);\n    &#125;\n&#125;\n\nclass MyParent1&#123;\n\n    public static String str&#x3D;&quot;hello world&quot;;\n\n    static &#123;\n        System.out.println(&quot;MyParent1 static block&quot;);\n    &#125;\n&#125;\n\nclass MyChild1 extends MyParent1&#123;\n    public static String str2&#x3D;&quot;welcome...&quot;;\n    static &#123;\n        System.out.println(&quot;MyChild1 static block&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<p>测试结果<br><img src=\"https://img-blog.csdnimg.cn/20190404225229276.png\" alt=\"在这里插入图片描述\"></p>\n<p>此时在MyChild1中定义了一个str2，并在main方法中调用的str2，是对MyChild类的一次主动使用，自然会初始化，自然也就会执行静态代码块，输出语句<br>而对于为什么MyParent1也会输出语句？<br>是因为主动使用里有一条<br>出初始化一个类的子类，那么也就是这个父类也会被主动使用，进行一次初始化。<br>父类会进行先行初始化</p>\n<p>测试总结：<br>对于一个静态字段来说，只有直接定义了该字段的类才会被初始化<br>当一个类在初始化时，要求其父类全部都已经初始化完毕<br>这就是问什么输出语句有先后顺序</p>\n<p>有关jvm虚拟机vm设置指令</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">-XX:+TraceClassLoading,用于追踪类的加载信息并打印出来\n -XX:+&lt;option&gt;，表示开启option选项\n -XX:-&lt;option&gt;，表示关闭option选项\n*-XX:&lt;option&gt;&#x3D;&lt;value&gt;，表示将option的值设置为value</code></pre>\n\n<p>再新建一个测试类MyTest2</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">package com.lagoon.jvm.classloder;\n\npublic class MyTest2 &#123;\n\n    public static void main(String[] args) &#123;\n        System.out.println(MyParent2.str);\n    &#125;\n&#125;\nclass MyParent2&#123;\n    public static String str&#x3D;&quot;hello,world&quot;;\n\n    static &#123;\n        System.out.println(&quot;MyParent2 static block&quot;);\n    &#125;\n&#125;\n</code></pre>\n\n<p>测试结果<br><img src=\"https://img-blog.csdnimg.cn/20190404225411357.png\" alt=\"在这里插入图片描述\"></p>\n<p>显而易见是在MyParent2里定义了静态字段，<br>所以会对这个类进行初始化，运行静态代码块<br>但是如果把</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static  String str&#x3D;&quot;hello,world&quot;;</code></pre>\n\n<p>改成</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public static final String str&#x3D;&quot;hello,world&quot;;</code></pre>\n\n<p>加上关键字final<br>运行结果如下<br><img src=\"https://img-blog.csdnimg.cn/20190404225519784.png\" alt=\"在这里插入图片描述\"></p>\n<p>产生这种差异的原因是</p>\n<p>final本身的作用在于str被定义以后不能再被改变，str成为常量，<br>然而常量在编译阶段，会被直接存入到调用这个常量的方法所在类（MyTest2）的常量池中<br>之后，MyTest2与MyParent2就没有任何的关系了</p>\n<p>因此本质上，调用类，也就是MyTest2，并没有直接引用到定义这个常量的类，也就是<br>MyParent2，因此不会触发定义常量的类的初始化</p>\n<p>对MyTest2进行反编译后如下</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190404225538165.png\" alt=\"在这里插入图片描述\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>助记符：<br>ldc表示将int，float或是String类型的常量值从常量池中推送至栈顶</p></blockquote>\n", "text": " jvm学习笔记之类的加载、连接与初始化——2019-04-04类的加载、连接与初始化 加载：查找并加载类的二进制数据 连接 验证：确保被加载类的正确性 准备：为类的静态变量分配内存，并将其初始化为默认值 解析：把类中的符号引用转换为直接引用 初始化：为类的静态变量赋予正确的初始...", "link": "", "photos": [], "count_time": {"symbolsCount": "3.5k", "symbolsTime": "3 mins."}, "categories": [{"name": "Java", "slug": "Java", "count": 2, "path": "api/categories/Java.json"}], "tags": [{"name": "jvm", "slug": "jvm", "count": 1, "path": "api/tags/jvm.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#jvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E3%80%81%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96%E2%80%94%E2%80%942019-04-04\"><span class=\"toc-text\">jvm学习笔记之类的加载、连接与初始化——2019-04-04</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E7%9A%84%E5%8A%A0%E8%BD%BD%E3%80%81%E8%BF%9E%E6%8E%A5%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">类的加载、连接与初始化</span></a></li></ol></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}}