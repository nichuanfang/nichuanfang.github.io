{"title": "Hello World", "uid": "b9663f58f18133b35bfe243f3e916a80", "slug": "hello-world", "date": "2023-05-11 08:19:00", "updated": "2023-07-27 00:10:07.089000", "comments": true, "path": "api/articles/hello-world.json", "keywords": null, "cover": "/img/hello-world/hello-world.jpg", "content": "<hr>\n<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in<a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"1-快速开始\"><a href=\"#1-快速开始\" class=\"headerlink\" title=\"1. 快速开始\"></a>1. 快速开始</h2><h3 id=\"创建新文档\"><a href=\"#创建新文档\" class=\"headerlink\" title=\"创建新文档\"></a>创建新文档</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new &quot;My New Post&quot;</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"启动本地服务\"><a href=\"#启动本地服务\" class=\"headerlink\" title=\"启动本地服务\"></a>启动本地服务</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"构建静态文件\"><a href=\"#构建静态文件\" class=\"headerlink\" title=\"构建静态文件\"></a>构建静态文件</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"部署\"><a href=\"#部署\" class=\"headerlink\" title=\"部署\"></a>部署</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<h2 id=\"2-Markdown-自定义容器\"><a href=\"#2-Markdown-自定义容器\" class=\"headerlink\" title=\"2. Markdown 自定义容器\"></a>2. Markdown 自定义容器</h2><p>所有的自定义容器都使用这种格式:</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::[type] [title]\n文本内容\n:::</code></pre>\n\n<ul>\n<li><code>type</code> 是容器的类型</li>\n<li><code>title</code> 是可选的,可以用来重命名容器的标题</li>\n</ul>\n<h3 id=\"Tip-容器\"><a href=\"#Tip-容器\" class=\"headerlink\" title=\"Tip 容器\"></a>Tip 容器</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::tip\nNormal Tips Container\n:::</code></pre>\n\n<p><img src=\"/img/hello-world/tip.webp\" alt=\"alt\"></p>\n<p>如果你不想使用默认的标题 TIP，你可以使用以下方法重命名你的容器标题:</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::tip Custom header\n\nCustom header\n\n- tips content\n- tips new line\n\n:::</code></pre>\n\n<p><img src=\"/img/hello-world/tip-rename.webp\" alt=\"alt\"></p>\n<h3 id=\"Warning-容器\"><a href=\"#Warning-容器\" class=\"headerlink\" title=\"Warning 容器\"></a>Warning 容器</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::warning\nWarning!!!\n:::</code></pre>\n\n<p><img src=\"/img/hello-world/warning.webp\" alt=\"alt\"></p>\n<h3 id=\"Danger-容器\"><a href=\"#Danger-容器\" class=\"headerlink\" title=\"Danger 容器\"></a>Danger 容器</h3><pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::danger\nDanger!!!\n:::</code></pre>\n\n<p><img src=\"/img/hello-world/danger.webp\" alt=\"alt\"></p>\n<h3 id=\"Details-容器\"><a href=\"#Details-容器\" class=\"headerlink\" title=\"Details 容器\"></a>Details 容器</h3><p>这是一种特殊类型的容器。如果你看过 GitHub 中的 details 容器，你可能会猜出它的功能是什么。</p>\n<p>是的，您可以隐藏某些内容，并单击来展开它。</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">:::details Click to see more\n\nFusce rutrum venenatis eros in hendrerit. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nullam eget risus egestas, aliquet ipsum sed, volutpat tortor. Proin finibus tortor ac mauris finibus rutrum. Nullam tincidunt arcu eu urna ullamcorper, eu ultricies turpis ornare. Morbi id sollicitudin orci. Proin lobortis vehicula nibh a ornare. Cras sodales eu ligula quis fermentum. Proin eu ultrices leo, quis iaculis justo. Sed dictum, nulla sit amet imperdiet commodo, libero sapien semper justo, ut lobortis elit nunc vitae ante. Nullam lobortis odio quam, ac condimentum elit posuere vitae. Sed ornare, odio et rutrum varius, lorem eros gravida urna, in pharetra sapien justo non magna.\n\n- details content\n- details new line\n\n&#96;console.log(&#39;hello world&#39;)&#96;\n\n:::</code></pre>\n\n<p><strong>关闭状态:</strong></p>\n<p><img src=\"/img/hello-world/detail.webp\" alt=\"alt\"></p>\n<p><strong>展开状态:</strong></p>\n<p><img src=\"/img/hello-world/detail-opened.webp\" alt=\"alt\"></p>\n", "feature": true, "text": " Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the...", "link": "", "photos": [], "count_time": {"symbolsCount": "1.7k", "symbolsTime": "2 mins."}, "categories": [{"name": "欢迎页", "slug": "欢迎页", "count": 1, "path": "api/categories/欢迎页.json"}], "tags": [{"name": "template", "slug": "template", "count": 1, "path": "api/tags/template.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\"><span class=\"toc-text\">1. 快速开始</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BA%E6%96%B0%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">创建新文档</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1\"><span class=\"toc-text\">启动本地服务</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">构建静态文件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">部署</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Markdown-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">2. Markdown 自定义容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tip-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Tip 容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Warning-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Warning 容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Danger-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Danger 容器</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Details-%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">Details 容器</span></a></li></ol></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true, "prev_post": {}, "next_post": {"title": "可重入锁ReentrantLock高级特性", "uid": "2e5004b8a8ff49317aa7f3e9b71f74cf", "slug": "reentrant-lock", "date": "2023-05-08 07:05:39", "updated": "2023-07-27 00:10:07.089000", "comments": true, "path": "api/articles/reentrant-lock.json", "keywords": null, "cover": "/img/reentrant-lock/reentrant-lock.jpg", "content": "<h2 id=\"ReentrantLock提供了Synchronized不具备的三个高级特性\"><a href=\"#ReentrantLock提供了Synchronized不具备的三个高级特性\" class=\"headerlink\" title=\"ReentrantLock提供了Synchronized不具备的三个高级特性\"></a><code>ReentrantLock</code>提供了<code>Synchronized</code>不具备的三个高级特性</h2><ul>\n<li>公平锁</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * Creates an instance of &#123;@code ReentrantLock&#125;.\n * This is equivalent to using &#123;@code ReentrantLock(false)&#125;.\n *&#x2F;\npublic ReentrantLock() &#123;\n    sync &#x3D; new NonfairSync();\n&#125;</code></pre>\n\n<ul>\n<li>等待可中断</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 尝试锁定\n *\n * @param timeout 超时时间\n * @param unit    单位\n * @return boolean 尝试获取锁的结果\n * @throws InterruptedException 中断异常\n *&#x2F;\npublic boolean tryLock(long timeout, TimeUnit unit)\n        throws InterruptedException &#123;\n    return sync.tryAcquireNanos(1, unit.toNanos(timeout));\n&#125;</code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>条件通知,一把锁可以生成多个条件,每个条件可以对应一个线程分组,可以通过 condition 对象来进行分组等待和唤醒,解决了<code>synchronized</code>关键字只能<code>notifyAll()</code>的问题</p>\n</div>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">public Condition newCondition() &#123;\n    return sync.newCondition();\n&#125;</code></pre>\n\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p><code>ReentrantLock</code>条件通知使用注意点</p>\n</div>\n<ul>\n<li>每个 condition 可以绑定若干个线程,如果需要多个 condition 请先对线程进行分组;</li>\n<li>使用<code>await()</code>和<code>signal()</code>或者<code>signalAll()</code>之前需要先获取锁,在 finally 代码块中要释放锁;</li>\n</ul>\n<h2 id=\"实战演示\"><a href=\"#实战演示\" class=\"headerlink\" title=\"实战演示\"></a>实战演示</h2><p>模拟三个线程,对其中两个线程分为一组绑定到<code>condition1</code>,剩下的一个线程单独一组绑定到<code>condition2</code>,main 线程再分别唤醒等待状态的各线程组.</p>\n<ul>\n<li>创建线程池</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">private final ThreadFactory threadFactory &#x3D; ThreadFactoryBuilder.create().setNamePrefix(&quot;test&quot;).build();\n\nprivate final Executor executor &#x3D; new ThreadPoolExecutor(Runtime.getRuntime().availableProcessors() + 1, Runtime.getRuntime().availableProcessors() + 1,\n        10, TimeUnit.MINUTES, new LinkedBlockingQueue&lt;&gt;(16), threadFactory, new ThreadPoolExecutor.AbortPolicy());</code></pre>\n\n<ul>\n<li>初始化<code>CountDownLatch</code>和<code>ReentrantLock</code>,注册两个<code>condition</code>.</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;闭锁1  让3个子线程同时启动\nCountDownLatch startCdl &#x3D; new CountDownLatch(1);\n&#x2F;&#x2F;闭锁2  main线程等待子线程都执行完毕再结束\nCountDownLatch endCdl &#x3D; new CountDownLatch(3);\n&#x2F;&#x2F;同步锁\nReentrantLock lock &#x3D; new ReentrantLock(false);\n\nCondition condition1 &#x3D; lock.newCondition();\nCondition condition2 &#x3D; lock.newCondition();</code></pre>\n\n<ul>\n<li>创建子线程,进入等待状态,等主线程唤醒</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;**\n * 获取线程\n *\n * @param startCdl       开始同步器\n * @param endCdl         结束同步器\n * @param lock      锁\n * @param condition 条件\n * @return &#123;@link Thread&#125;\n *&#x2F;\nprivate Runnable getCallable(CountDownLatch startCdl, CountDownLatch endCdl, ReentrantLock lock, Condition condition) &#123;\n    return () -&gt; &#123;\n        try &#123;\n            &#x2F;&#x2F;让三个子线程同时启动\n            startCdl.await();\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125;\n        lock.lock();\n        try &#123;\n            &#x2F;&#x2F;await会释放当前锁\n            condition.await();\n            log.info(&quot;线程&#123;&#125;被唤醒,时间:&#123;&#125;&quot;, Thread.currentThread().getName(),new Date());\n        &#125; catch (InterruptedException e) &#123;\n            e.printStackTrace();\n        &#125; finally &#123;\n            log.info(&quot;线程:&#123;&#125;执行完毕,释放同步锁&quot;,Thread.currentThread().getName());\n            &#x2F;&#x2F;被唤醒后,需要释放当前持有的锁\n            lock.unlock();\n            &#x2F;&#x2F;计数器为0主线程停止等待\n            endCdl.countDown();\n        &#125;\n    &#125;;\n&#125;\n&#x2F;&#x2F;启动三个子线程\nexecutor.execute(getCallable(startCdl,endCdl ,lock, condition1));\nexecutor.execute(getCallable(startCdl,endCdl ,lock, condition1));\nexecutor.execute(getCallable(startCdl,endCdl,lock, condition2));</code></pre>\n\n<ul>\n<li>主线程进行唤醒</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">log.info(&quot;Main线程开始执行....&quot;);\nstartCdl.countDown();\nlog.info(&quot;子线程正在等待....&quot;);\n\nlock.lock();\ncondition1.signalAll();\nlock.unlock();\ntry &#123;\n    &#x2F;&#x2F;主线程阻塞2秒 区分两次唤醒\n    Thread.sleep(2000);\n&#125; catch (InterruptedException e) &#123;\n    e.printStackTrace();\n&#125;\nlock.lock();\ncondition2.signal();\nlock.unlock();\ntry &#123;\n    log.info(&quot;等待三个子线程执行完毕&quot;);\n    endCdl.await();\n    log.info(&quot;main线程结束&quot;);\n&#125; catch (InterruptedException e) &#123;\n    e.printStackTrace();\n&#125;</code></pre>\n\n<ul>\n<li>控制台输出. 可以看出两次唤醒相隔了两秒<br><img src=\"/img/reentrant-lock/reentrant-lock-test.webp\" alt=\"alt\"></li>\n</ul>\n", "text": "ReentrantLock提供了Synchronized不具备的三个高级特性 公平锁 &#x2F;** * Creates an instance of &#123;@code ReentrantLock&#125;. * This is equivalent to using ...", "link": "", "photos": [], "count_time": {"symbolsCount": "3.7k", "symbolsTime": "3 mins."}, "categories": [{"name": "分布式", "slug": "分布式", "count": 1, "path": "api/categories/分布式.json"}], "tags": [{"name": "ReentrantLock", "slug": "ReentrantLock", "count": 1, "path": "api/tags/ReentrantLock.json"}], "toc": "<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#ReentrantLock%E6%8F%90%E4%BE%9B%E4%BA%86Synchronized%E4%B8%8D%E5%85%B7%E5%A4%87%E7%9A%84%E4%B8%89%E4%B8%AA%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">ReentrantLock提供了Synchronized不具备的三个高级特性</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E6%88%98%E6%BC%94%E7%A4%BA\"><span class=\"toc-text\">实战演示</span></a></li></ol>", "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}}