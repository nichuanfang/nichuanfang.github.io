{"total": 12, "pageSize": 12, "pageCount": 1, "data": [{"title": "python学习之re模块", "uid": "00fb2df139ade064036e614bfc314c4c", "slug": "python学习之re模块", "date": "2023-07-27 00:32:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/python学习之re模块.json", "keywords": null, "cover": "/img/python学习之re模块/python学习之re模块.jpg", "text": "一、正则表达式正则表达式本身是一种小型的、高度专业化的编程语言，它并不是 Python 的一部分。正则表达式是用于处理字符串的强大工具，拥有自己独特的语法以及一个独立的处理引擎，效率上可能不如 str 自带的方法，但功能十分强大。得益于这一点，在提供了正则表达式的语言里，正则表达...", "link": "", "photos": [], "count_time": {"symbolsCount": "37k", "symbolsTime": "33 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 3, "path": "api/categories/Python.json"}], "tags": [{"name": "持久化", "slug": "持久化", "count": 2, "path": "api/tags/持久化.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "Hello World", "uid": "b9663f58f18133b35bfe243f3e916a80", "slug": "hello-world", "date": "2023-05-11 08:19:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/hello-world.json", "keywords": null, "cover": "/img/hello-world/hello-world.jpg", "feature": true, "text": " Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the...", "link": "", "photos": [], "count_time": {"symbolsCount": "1.7k", "symbolsTime": "2 mins."}, "categories": [{"name": "欢迎页", "slug": "欢迎页", "count": 1, "path": "api/categories/欢迎页.json"}], "tags": [{"name": "template", "slug": "template", "count": 1, "path": "api/tags/template.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "可重入锁ReentrantLock高级特性", "uid": "2e5004b8a8ff49317aa7f3e9b71f74cf", "slug": "reentrant-lock", "date": "2023-05-08 07:05:39", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/reentrant-lock.json", "keywords": null, "cover": "/img/reentrant-lock/reentrant-lock.jpg", "text": "ReentrantLock提供了Synchronized不具备的三个高级特性 公平锁 &#x2F;** * Creates an instance of &#123;@code ReentrantLock&#125;. * This is equivalent to using ...", "link": "", "photos": [], "count_time": {"symbolsCount": "3.7k", "symbolsTime": "3 mins."}, "categories": [{"name": "分布式", "slug": "分布式", "count": 1, "path": "api/categories/分布式.json"}], "tags": [{"name": "ReentrantLock", "slug": "ReentrantLock", "count": 1, "path": "api/tags/ReentrantLock.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "python高级学习日志第二、三天之网络编程", "uid": "e266b70dd1da3efc040f3fd65a612a8c", "slug": "python高级学习日志第二、三天之网络编程", "date": "2022-10-01 09:29:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/python高级学习日志第二、三天之网络编程.json", "keywords": null, "cover": "/img/python高级学习日志第二、三天之网络编程/python高级学习日志第二、三天之网络编程.jpg", "text": "python 高级学习日志第二、三天之网络编程UDP 接收数据以及基于 UDP 的交易聊天器 一个 Java 程序员，但是打算自学一下 python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。 哈哈，我喜欢边写程序边听歌 上次记录的是怎么用...", "link": "", "photos": [], "count_time": {"symbolsCount": "4.3k", "symbolsTime": "4 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 3, "path": "api/categories/Python.json"}], "tags": [{"name": "Python网络编程", "slug": "Python网络编程", "count": 2, "path": "api/tags/Python网络编程.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "python高级学习日志第一天之网络编程", "uid": "3ab3df2387b700f13887b79994864558", "slug": "python高级学习日志第一天之网络编程", "date": "2022-09-30 14:22:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/python高级学习日志第一天之网络编程.json", "keywords": null, "cover": "/img/python高级学习日志第一天之网络编程/python高级学习日志第一天之网络编程.jpg", "text": "python 高级学习日志第一天之网络编程UDP 发送数据 一个 Java 程序员，但是打算自学一下 python，所以把自己学到的东西记录在这里。也免得我自己忘记新学的，年纪大了真的很容易忘东西。 哈哈，我喜欢边写程序边听歌 中国人民真蒸汽 这里直接记录的是我的实践内容 首先是...", "link": "", "photos": [], "count_time": {"symbolsCount": "2.8k", "symbolsTime": "3 mins."}, "categories": [{"name": "Python", "slug": "Python", "count": 3, "path": "api/categories/Python.json"}], "tags": [{"name": "Python网络编程", "slug": "Python网络编程", "count": 2, "path": "api/tags/Python网络编程.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "jvm学习笔记之类的加载、连接与初始化", "uid": "cb1bde52f4b0429979650f547c40a9be", "slug": "jvm学习笔记之类的加载、连接与初始化——2019-04-04", "date": "2021-07-09 11:39:11", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/jvm学习笔记之类的加载、连接与初始化——2019-04-04.json", "keywords": null, "cover": "/img/jvm学习笔记之类的加载、连接与初始化——2019-04-04/jvm学习笔记之类的加载、连接与初始化——2019-04-04.jpg", "feature": true, "text": "jvm学习笔记之类的加载、连接与初始化——2019-04-04类的加载、连接与初始化 加载：查找并加载类的二进制数据 连接 验证：确保被加载类的正确性 准备：为类的静态变量分配内存，并将其初始化为默认值 解析：把类中的符号引用转换为直接引用 初始化：为类的静态变量赋予正确的初始值...", "link": "", "photos": [], "count_time": {"symbolsCount": "3.5k", "symbolsTime": "3 mins."}, "categories": [{"name": "Java", "slug": "Java", "count": 2, "path": "api/categories/Java.json"}], "tags": [{"name": "jvm", "slug": "jvm", "count": 1, "path": "api/tags/jvm.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "【Java】java23种设计模式案例之命令模式", "uid": "99f059eccc4d62d721a5fd588d745cd9", "slug": "【Java】java23种设计模式案例之命令模式", "date": "2020-12-01 10:50:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/【Java】java23种设计模式案例之命令模式.json", "keywords": null, "cover": "/img/【Java】java23种设计模式案例之命令模式/【Java】java23种设计模式案例之命令模式.jpg", "feature": true, "text": "【Java】java23 种设计模式案例之命令模式 命令模式定义参考 例子: 源代码 3 种案例 1.Command 案例问题描述：一个指挥官请求（命令）三连偷袭敌人代码 package com.lagoon.command; &#x2F;** * 问题描述：一个指挥官请求（命令...", "link": "", "photos": [], "count_time": {"symbolsCount": "8.3k", "symbolsTime": "8 mins."}, "categories": [{"name": "Java", "slug": "Java", "count": 2, "path": "api/categories/Java.json"}], "tags": [{"name": "设计模式", "slug": "设计模式", "count": 1, "path": "api/tags/设计模式.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "redis发布和订阅演示", "uid": "c0ef1bb9822760c44fd32eaf5be50c8a", "slug": "redis发布和订阅演示", "date": "2019-09-07 08:33:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/redis发布和订阅演示.json", "keywords": null, "cover": "/img/redis发布和订阅演示/redis发布和订阅演示.jpg", "text": "Redis 第五期：redis 发布和订阅演示 reis 的数据类型操作不再多说了，参考 redis 命令中文手册 演示 redis 的发布和订阅分别在命令行客户端和编程客户端演示 1.命令行客户端演示首先开启 redis 服务不多说了这里模拟一个发布者，三个订阅者在 redis...", "link": "", "photos": [], "count_time": {"symbolsCount": "2k", "symbolsTime": "2 mins."}, "categories": [{"name": "Redis", "slug": "Redis", "count": 4, "path": "api/categories/Redis.json"}], "tags": [{"name": "redis发布与订阅", "slug": "redis发布与订阅", "count": 1, "path": "api/tags/redis发布与订阅.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "Redis持久化的两种实现方式", "uid": "bdf4805eb354b82978231d675189aaca", "slug": "redis持久化的两种实现方式", "date": "2019-03-30 16:33:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/redis持久化的两种实现方式.json", "keywords": null, "cover": "/img/redis持久化的两种实现方式/redis持久化的两种实现方式.jpg", "text": "Redis第七期：redis持久化的两种实现方式 首先，什么是持久化，什么是redis的持久化持久化可以理解为存储，就是将数据存储到一个不会丢失的地方，如果把数据放在内存中，电脑关闭或重启数据就会丢失，所以放在内存中的数据不是持久化的，而放在磁盘就算是一种持久化。 Redis的数...", "link": "", "photos": [], "count_time": {"symbolsCount": "1.9k", "symbolsTime": "2 mins."}, "categories": [{"name": "Redis", "slug": "Redis", "count": 4, "path": "api/categories/Redis.json"}], "tags": [{"name": "持久化", "slug": "持久化", "count": 2, "path": "api/tags/持久化.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "redis对事务控制的实现", "uid": "8539baf449cb37333713337188dfc881", "slug": "redis对事务控制的实现", "date": "2019-03-25 19:26:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/redis对事务控制的实现.json", "keywords": null, "cover": "/img/redis对事务控制的实现/redis对事务控制的实现.jpg", "text": "Redis第六期：redis对事务控制的实现 首先，什么是事务？事务是指一系列操作步骤，这一系列的操作步骤，要么完全地执行，要么完全地不执行。比如微博中：A用户关注了B用户，那么A的关注人列表里面就会有B用户，B的粉丝列表里面就会有A用户。这个关注与被关注的过程是由一系列操作步骤...", "link": "", "photos": [], "count_time": {"symbolsCount": "1.7k", "symbolsTime": "2 mins."}, "categories": [{"name": "Redis", "slug": "Redis", "count": 4, "path": "api/categories/Redis.json"}], "tags": [{"name": "事务控制", "slug": "事务控制", "count": 1, "path": "api/tags/事务控制.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "Redis的一个小坑", "uid": "4ab18f90b2937be74536568e1919dbe5", "slug": "Redis的一个小坑", "date": "2019-03-23 22:23:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/Redis的一个小坑.json", "keywords": null, "cover": "/img/Redis的一个小坑/Redis的一个小坑.jpg", "text": "Redis 的一个小坑 又忘了，修改了 redis 的配置文件就一定要重新制定配置文件启动太坑了，记录一下测试成功 package com.lagoon; import redis.clients.jedis.Jedis; &#x2F;** * Hello world! * *&...", "link": "", "photos": [], "count_time": {"symbolsCount": 489, "symbolsTime": "1 mins."}, "categories": [{"name": "Redis", "slug": "Redis", "count": 4, "path": "api/categories/Redis.json"}], "tags": [{"name": "tips", "slug": "tips", "count": 1, "path": "api/tags/tips.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}, {"title": "有关Docker容器架构", "uid": "c1b8e397764a04b15b42b94eec3a8f01", "slug": "有关Docker容器架构", "date": "2019-03-22 10:29:00", "updated": "2023-07-27 18:18:52.981000", "comments": true, "path": "api/articles/有关Docker容器架构.json", "keywords": null, "cover": "/img/有关Docker容器架构/有关Docker容器架构.jpg", "text": "有关Docker容器架构 Docker客户端与服务器Docker是一个客户端-服务器的（C&#x2F;S）架构程序，Docker的客户端只需要向Docker服务器或者守护进程发出请求，服务器或者守护进程将完成所有工作并返回结果。Docker提供了一个命令行工具和一整套RESTfu...", "link": "", "photos": [], "count_time": {"symbolsCount": "1.2k", "symbolsTime": "1 mins."}, "categories": [{"name": "Devops", "slug": "Devops", "count": 1, "path": "api/categories/Devops.json"}], "tags": [{"name": "Docker", "slug": "Docker", "count": 1, "path": "api/tags/Docker.json"}], "author": {"name": "倪传方", "slug": "blog-author", "avatar": "/img/site/avatar.webp", "link": "/", "description": "一位正在重塑知识的技术人 <br /> @ <b>微信：ncf08209270</b>", "socials": {"github": "https://github.com/nichuanfang", "twitter": "https://twitter.com/jayzhouzj", "stackoverflow": "https://stackoverflow.com/users/12083298/jaychou", "wechat": "", "qq": "", "weibo": "", "zhihu": "https://www.zhihu.com/people/ba-dao-yi-shan-zhu", "csdn": "https://blog.csdn.net/Saphroth", "juejin": "https://juejin.cn/user/2740456686366830", "customs": {}}}, "mapped": true}]}