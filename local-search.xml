<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GithubActions密钥和变量统一管理</title>
    <link href="/2023/12/02/GithubActions%E5%AF%86%E9%92%A5%E5%92%8C%E5%8F%98%E9%87%8F%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86/"/>
    <url>/2023/12/02/GithubActions%E5%AF%86%E9%92%A5%E5%92%8C%E5%8F%98%E9%87%8F%E7%BB%9F%E4%B8%80%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="集中管理同一个账户下的变量和-密钥"><a href="#集中管理同一个账户下的变量和-密钥" class="headerlink" title="集中管理同一个账户下的变量和 密钥"></a>集中管理同一个账户下的变量和 密钥</h1><h2 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h2><h3 id="编辑config-json"><a href="#编辑config-json" class="headerlink" title="编辑config.json"></a>编辑<a href="https://github.com/nichuanfang/.github/blob/main/config.json"><code>config.json</code></a></h3><div class="note note-info">            <p>topic: 当前区块的主要分类<br>repositories: 配置的变量和密钥应用到哪些仓库<br>vars: 全局变量 通过 $ 调用<br>secrets: 全局密钥 通过 $ 调用</p>          </div><h3 id="触发工作流generate-and-sync"><a href="#触发工作流generate-and-sync" class="headerlink" title="触发工作流generate and sync"></a>触发工作流<a href="https://github.com/nichuanfang/.github/actions/workflows/main.yml"><code>generate and sync</code></a></h3><div class="note note-info">            <ol><li><p>your project-&gt; Settings -&gt; Secrets and variables -&gt; config your secrets and variables</p></li><li><p>生成的<a href="https://github.com/nichuanfang/.github/blob/main/.github/workflows/synchronize_secrets.yml"><code>synchronize_secrets.yml</code></a>和<a href="https://github.com/nichuanfang/.github/blob/main/.github/workflows/synchronize_variables.yml"><code>synchronize_variables.yml</code></a>为两个新的工作流</p></li><li><p>synchronize_variables.yml: 同步全局变量</p></li><li><p>synchronize_secrets.yml: 同步全局密钥</p></li></ol>          </div>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GithubActions</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fluid主题配置</title>
    <link href="/2023/12/02/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/12/02/fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>个人博客搭建心得 使用<code>hexo + fluid</code>主题</p><div class="note note-success">            <p>本文主要介绍了个人博客搭建的心得， 使用<code>hexo + fluid</code>主题，以及一些常用的插件 。</p>          </div><h2 id="1-Hexo"><a href="#1-Hexo" class="headerlink" title="1. Hexo"></a>1. Hexo</h2><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1. 安装"></a>1.1. 安装</h3><h4 id="1-1-1-Node-js"><a href="#1-1-1-Node-js" class="headerlink" title="1.1.1. Node.js"></a>1.1.1. Node.js</h4><p><a href="https://nodejs.org/en/">Node.js 官网</a>下载最新版本的 Node.js，目前最新版本为 14.15.4。</p><h4 id="1-1-2-Hexo"><a href="#1-1-2-Hexo" class="headerlink" title="1.1.2. Hexo"></a>1.1.2. Hexo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 安装</span><br>npm install -g hexo-cli<br><span class="hljs-comment"># 查看版本</span><br>hexo -v<br></code></pre></td></tr></table></figure><h3 id="1-2-初始化"><a href="#1-2-初始化" class="headerlink" title="1.2. 初始化"></a>1.2. 初始化</h3><h4 id="1-2-1-初始化"><a href="#1-2-1-初始化" class="headerlink" title="1.2.1. 初始化"></a>1.2.1. 初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化</span><br>hexo init blog<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> blog<br><span class="hljs-comment"># 安装依赖</span><br>npm install<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go学习</title>
    <link href="/2023/12/02/go%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/02/go%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>让我们先对 Go（或称 Golang ）做一个小小的介绍。Go 是由谷歌工程师 Robert Griesemer、Rob Pike 和 Ken Thompson 设计的。它是一种静态类型的、编译的语言。第一个版本于 2012 年 3 月作为开源版本发布。在许多编程语言中，有许多方法来解决一个特定的问题。程序员要花很多时间去思考解决它的最佳方法。Go 却相信用较少的功能——只有一种正确的方式来解决问题,这为开发人员节省了时间，并使大型代码库易于维护。 Go 中没有像 <code>maps</code> 和 <code>filters</code> 这样的 “表达性”功能。</p>          </div><blockquote><ul><li>“Go 是一种开源的编程语言，它使人们能够轻松地构建简单、可靠和高效的软件”。- GoLang</li><li>“当你有增加表现力的功能时，通常会增加系统开销”—— Rob Pike</li></ul></blockquote><p><img src="https://cdn-media-1.freecodecamp.org/images/1*AUiSG5Gqz8MzaGCvGpckGA.png" alt="1*AUiSG5Gqz8MzaGCvGpckGA"></p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>Go 是由 packages（包）组成的。package main 告诉 Go 编译器，该程序被编译为可执行文件，而不是共享库。它是一个应用程序的入口点。package main 的定义如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br></code></pre></td></tr></table></figure><p>让我们继续前进，在 Go workspace 创建一个 <code>main.go</code> 文件，编写一个简单的 hello world 例子。</p><h4 id="Workspace"><a href="#Workspace" class="headerlink" title="Workspace"></a><strong>Workspace</strong></h4><p>Go 中的 workspace 是由环境变量 <code>GOPATH</code> 定义的。</p><p>你写的任何代码都要写在 workspace 里面。Go 将搜索 <code>GOPATH</code> 目录内的任何软件包，或者 <code>GOROOT</code> 目录，该目录在安装 Go 时默认设置。<code>GOROOT</code> 是安装 Go 的路径。</p><p>设置 <code>GOPATH</code> 到你想要的目录。现在，让我们把它添加到 <code>~/workspace</code> 文件夹内。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> <span class="hljs-built_in">env</span> <span class="hljs-built_in">export</span> GOPATH=~/workspace</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">go inside the workspace directory <span class="hljs-built_in">cd</span> ~/workspace</span><br></code></pre></td></tr></table></figure><p>在我们刚刚创建的 workspace 文件夹中创建 <code>main.go</code> 文件，其中包含以下代码。</p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> )<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，<code>fmt</code>是 Go 中的一个内置包，它实现了用于格式化 I&#x2F;O 输出的函数。</p><p>我们通过使用 <code>import</code> 关键字在 Go 中导入一个包。<code>func main</code> 是代码被执行的主入口点。<code>Println</code> 是包 <code>fmt</code> 中的一个函数，它为我们打印出 “hello world”。</p><p>让我们通过运行这个文件来看看。我们有两种方法可以运行 Go 命令。正如我们所知，Go 是一种编译语言，所以我们首先需要在执行之前编译它。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">go build main.go</span><br></code></pre></td></tr></table></figure><p>这将创建一个二进制可执行文件<code>main</code>，现在我们可以运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">./main <span class="hljs-comment"># Hello World!</span></span><br></code></pre></td></tr></table></figure><p>还有一种更简单的方法来运行程序。<code>go run</code> 命令会编译源代码，并直接执行源码中的 main() 函数，不会在当前目录留下可执行文件。你可以简单地运行以下命令来执行该程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go run main.go # Hello World!<br></code></pre></td></tr></table></figure><p>**<em>注意</em>**：<em>要尝试本博客中提到的代码，你可以使用 <a href="https://play.golang.org/">https://play.golang.org</a></em></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Go 中的变量是明确声明的。Go 是一种静态类型的语言。这意味着在声明变量的时候会检查变量的类型。一个变量可以被声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>在这种情况下，值将被设置为 0。使用下面的语法来声明和初始化一个具有不同值的变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这里的变量被自动分配为 int。我们可以对变量的声明使用一个简短定义，即：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">message := <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>我们也可以在同一行中声明多个变量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> b, c <span class="hljs-type">int</span> = <span class="hljs-number">2</span>, <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>像其他编程语言一样，Go 支持各种不同的数据结构。让我们来探索其中：</p><h4 id="整型、字符串和布尔值"><a href="#整型、字符串和布尔值" class="headerlink" title="整型、字符串和布尔值"></a>整型、字符串和布尔值</h4><p>支持的整型包括 int, int8, int16, int32, int64,<br>uint, uint8, uint16, uint32, uint64, uintptr(无符号整型，长度跟平台相关，它的长度可以用来保存一个指针地址) 等</p><p>字符串类型存储一个字节序列。它用关键字 <code>string</code> 来表示和声明。</p><p>布尔值使用关键字 <code>bool</code> 来存储。</p><p>Go 也支持复数类型，可以用 <code>complex64</code> 和 <code>complex128</code> 来声明。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a <span class="hljs-type">bool</span> = <span class="hljs-literal">true</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> c <span class="hljs-type">string</span> = <span class="hljs-string">&#x27;hello world&#x27;</span><br><span class="hljs-keyword">var</span> d <span class="hljs-type">float32</span> = <span class="hljs-number">1.222</span><br><span class="hljs-keyword">var</span> x <span class="hljs-type">complex128</span> = cmplx.Sqrt(<span class="hljs-number">-5</span> + <span class="hljs-number">12i</span>)<br></code></pre></td></tr></table></figure><h4 id="数组、切片和-Maps"><a href="#数组、切片和-Maps" class="headerlink" title="数组、切片和 Maps"></a>数组、切片和 Maps</h4><p>数组是由相同数据类型的元素组成的一个序列。数组在声明时有一个固定的长度，所以它不能被扩大到超过这个长度。一个数组声明：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">5</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>数组也可以是多维的。我们可以简单地用以下方式创建它们：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> multiD [<span class="hljs-number">2</span>][<span class="hljs-number">3</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>数组会限制数组的值发生变化，当代码运行时。数组也没有提供获取子数组的能力。 为此，Go有一种数据类型，叫做切片（slices）。</p><p>切片存储了一连串的元素，并且可以在任何时候扩展。切片声明与数组声明类似——但没有定义容量：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> b []<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p>这将创建一个容量为 0、长度为 0 的切片。</p><p>也可以用容量和长度来定义切片。我们可以用下面的语法来定义它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">numbers := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>这里，切片的初始长度为 5，容量为 10。</p><p>分片是对数组的一种抽象。切片使用一个数组作为底层结构。一个片断包含三个部分：容量、长度和一个指向底层数组的指针，如下图所示：</p><p><img src="https://cdn-media-1.freecodecamp.org/images/1*P0lNCO0sQwIYHLEX_mfSOQ.png" alt="1*P0lNCO0sQwIYHLEX_mfSOQ"></p><p>图片源自: <a href="https://blog.golang.org/go-slices-usage-and-internals">https://blog.golang.org/go-slices-usage-and-internals</a></p><p>一个切片的容量可以通过使用 append 或 copy 函数来增加。append 函数将值添加到数组的末端，如果需要的话也可以增加容量。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">numbers = <span class="hljs-built_in">append</span>(numbers, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>另一种增加切片容量的方法是使用 copy 函数。简单地创建另一个容量更大的片断，并将原来的切片复制到新创建的切片上：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// create a new slice number2 := make([]int, 15)</span><br><br><span class="hljs-comment">// copy the original slice to new slice copy(number2, number)</span><br></code></pre></td></tr></table></figure><p>我们可以创建一个切片的子切片。这可以通过以下命令简单地完成：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// initialize a slice with 4 len and values number2 = []int&#123;1,2,3,4&#125; fmt.Println(numbers)</span><br><span class="hljs-comment">// -&gt; [1 2 3 4]</span><br><span class="hljs-comment">// create sub slices slice1 := number2[2:] fmt.Println(slice1)</span><br><span class="hljs-comment">// -&gt; [3 4] slice2 := number2[:3] fmt.Println(slice2)</span><br><span class="hljs-comment">// -&gt; [1 2 3] slice3 := number2[1:4] fmt.Println(slice3)</span><br><span class="hljs-comment">// -&gt; [2 3 4]</span><br></code></pre></td></tr></table></figure><p>Maps 是 Go 中的一种数据类型，它将键映射到值。我们可以使用以下命令来定义一个 map：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> m <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p><code>m</code> 是新的 map 变量，它的键是 <code>string</code> 类型， 值是 <code>integers</code> 类型。我们很容易在 map 上添加键值对：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// adding key/value m[&#x27;clearity&#x27;] = 2 m[&#x27;simplicity&#x27;] = 3</span><br><span class="hljs-comment">// printing the values fmt.Println(m[&#x27;clearity&#x27;])</span><br><span class="hljs-comment">// -&gt; 2 fmt.Println(m[&#x27;simplicity&#x27;])</span><br><span class="hljs-comment">// -&gt; 3</span><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>一种类型的数据类型可以通过类型转换转换为另一种类型。让我们看看一个简单的类型转换：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">1.1</span> b := <span class="hljs-type">int</span>(a) fmt.Println(b)<br><span class="hljs-comment">//-&gt; 1</span><br></code></pre></td></tr></table></figure><p>不是所有类型的数据类型都可以转换为另一种类型。请确保数据类型与转换的内容相匹配。</p><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p>对于条件性语句，我们可以使用 if-else 语句，如下例所示。请确保大括号与条件语句在同一行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">if</span> num := <span class="hljs-number">9</span>; num &lt; <span class="hljs-number">0</span> &#123; fmt.Println(num, <span class="hljs-string">&quot;is negative&quot;</span>) &#125;<br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> num &lt; <span class="hljs-number">10</span> &#123; fmt.Println(num, <span class="hljs-string">&quot;has 1 digit&quot;</span>) &#125; <span class="hljs-keyword">else</span> &#123; fmt.Println(num, <span class="hljs-string">&quot;has multiple digits&quot;</span>) &#125;<br></code></pre></td></tr></table></figure><h4 id="switch-case"><a href="#switch-case" class="headerlink" title="switch case"></a>switch case</h4><p>Switch cases 有助于组织多个条件语句。下面的例子显示了一个简单的 siwtch 语句：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">2</span> <span class="hljs-keyword">switch</span> i &#123; <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>: fmt.Println(<span class="hljs-string">&quot;one&quot;</span>) <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>: fmt.Println(<span class="hljs-string">&quot;two&quot;</span>) <span class="hljs-keyword">default</span>: fmt.Println(<span class="hljs-string">&quot;none&quot;</span>) &#125;<br></code></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><p>Go 有一个循环的关键词 <code>for</code>。<code>for</code> 循环命令用于实现不同种类的循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">i := <span class="hljs-number">0</span> sum := <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i &lt; <span class="hljs-number">10</span> &#123; sum += <span class="hljs-number">1</span> i++ &#125; fmt.Println(sum)<br></code></pre></td></tr></table></figure><p>上面的例子类似于 C 语言中的 while 循环。</p><p>Go 中的 for 语句也可以用于普通的 for 循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">sum := <span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123; sum += i &#125; fmt.Println(sum)<br></code></pre></td></tr></table></figure><p>Go 中的死循环：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123; &#125;<br></code></pre></td></tr></table></figure><h3 id="Pointers-（指针）"><a href="#Pointers-（指针）" class="headerlink" title="Pointers （指针）"></a>Pointers （指针）</h3><p>Go提供了指针。指针是用来保存一个值的地址的地方。指针是由 * 定义的。指针是根据数据的类型来定义的，例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ap *<span class="hljs-type">int</span><br></code></pre></td></tr></table></figure><p><code>ap</code> 是指向一个整数类型的指针。<code>&amp;</code> 操作符可以用来获取一个变量的地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-number">12</span> ap = &amp;a<br></code></pre></td></tr></table></figure><p>指针所指向的值可以使用 <code>*</code> 操作符来访问：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">fmt.Println(*ap) <span class="hljs-comment">// =&gt; 12</span><br></code></pre></td></tr></table></figure><p>在传递结构体作为参数时，或者在为定义的类型声明方法时，通常倾向于使用指针。</p><ol><li>传递值时，实际上是在复制值，这意味着更多的内存。</li><li>通过指针，函数改变的值会反映在 方法&#x2F;函数 调用者身上</li></ol><p>例如：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">increment</span><span class="hljs-params">(i *<span class="hljs-type">int</span>)</span></span> &#123; *i++ &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; i := <span class="hljs-number">10</span> increment(&amp;i) fmt.Println(i) &#125; <span class="hljs-comment">//=&gt; 11</span><br></code></pre></td></tr></table></figure><p>注意：当你在尝试博客中的示例代码时，不要忘记用 <code>package main</code> 包含它，并在需要时导入 fmt 或其他包，如上面第一个 main.go 例子中所示。</p><h3 id="Functions-（函数）"><a href="#Functions-（函数）" class="headerlink" title="Functions （函数）"></a>Functions （函数）</h3><p>在 main package 中定义的 main 函数是 go 程序执行的入口。更多的函数可以被定义和使用。让我们来看看一个简单的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123; c := a + b <span class="hljs-keyword">return</span> c &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; fmt.Println(add(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) &#125; <span class="hljs-comment">//=&gt; 3</span><br></code></pre></td></tr></table></figure><p>在上面的例子中我们可以看到，Go 函数是用 <strong>func</strong> 关键字来定义的，后面是函数名称。一个函数的 <strong>参数</strong> 需要根据其数据类型来定义，最后是返回的数据类型。</p><p>一个函数的返回值也可以在函数中预先定义：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (c <span class="hljs-type">int</span>) &#123; c = a + b <span class="hljs-keyword">return</span> &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; fmt.Println(add(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>)) &#125; <span class="hljs-comment">//=&gt; 3</span><br></code></pre></td></tr></table></figure><p>这里c被定义为返回变量。所以定义的变量c会自动返回，而不需要在最后的返回语句中定义。</p><p>你也可以从一个函数中返回多个返回值，用逗号来分隔返回值。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">add</span><span class="hljs-params">(a <span class="hljs-type">int</span>, b <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">string</span>) &#123; c := a + b <span class="hljs-keyword">return</span> c, <span class="hljs-string">&quot;successfully added&quot;</span> &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; sum, message := add(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>) fmt.Println(message) fmt.Println(sum) &#125;<br></code></pre></td></tr></table></figure><h3 id="方法、结构体、接口"><a href="#方法、结构体、接口" class="headerlink" title="方法、结构体、接口"></a>方法、结构体、接口</h3><p>Go并不是一种完全面向对象的语言，但通过结构体（Struct）、接口（Interface）和方法（Method），它有很多面向对象的支持和感觉。</p><h4 id="结构体（Struct）"><a href="#结构体（Struct）" class="headerlink" title="结构体（Struct）"></a>结构体（Struct）</h4><p>结构体是一种类型化的、不同字段的集合。结构体用于将数据分组。例如，如果我们想对 Person 类型的数据进行分组，我们可以定义一个人的属性，其中可能包括姓名、年龄、性别。可以使用以下语法来定义一个结构体：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> person <span class="hljs-keyword">struct</span> &#123; name <span class="hljs-type">string</span> age <span class="hljs-type">int</span> gender <span class="hljs-type">string</span> &#125;<br></code></pre></td></tr></table></figure><p>在定义了一个人的类型结构后，现在让我们来创建一个 person：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//way 1: specifying attribute and value p = person&#123;name: &quot;Bob&quot;, age: 42, gender: &quot;Male&quot;&#125; //way 2: specifying only value person&#123;&quot;Bob&quot;, 42, &quot;Male&quot;&#125;</span><br></code></pre></td></tr></table></figure><p>我们可以很容易地用一个点（.）来访问这些数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">p.name <span class="hljs-comment">//=&gt; Bob p.age //=&gt; 42 p.gender //=&gt; Male</span><br></code></pre></td></tr></table></figure><p>你也可以用结构的指针直接访问其属性：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">pp = &amp;person&#123;name: <span class="hljs-string">&quot;Bob&quot;</span>, age: <span class="hljs-number">42</span>, gender: <span class="hljs-string">&quot;Male&quot;</span>&#125; pp.name <span class="hljs-comment">//=&gt; Bob</span><br></code></pre></td></tr></table></figure><h4 id="方法（Methods）"><a href="#方法（Methods）" class="headerlink" title="方法（Methods）"></a>方法（Methods）</h4><p>方法（Method）是一种特殊的函数类型，它有一个 <em>receiver</em> 。<em>receiver</em> 可以是一个值或一个指针。让我们创建一个名为 describe 的方法（Method），它有一个我们在上面的例子中创建的接收器类型的 person：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">// struct defination type person struct &#123; name string age int gender string &#125; // method defination func (p *person) describe() &#123; fmt.Printf(&quot;%v is %v years old.&quot;, p.name, p.age) &#125; func (p *person) setAge(age int) &#123; p.age = age &#125; func (p person) setName(name string) &#123; p.name = name &#125; func main() &#123; pp := &amp;person&#123;name: &quot;Bob&quot;, age: 42, gender: &quot;Male&quot;&#125; pp.describe() // =&gt; Bob is 42 years old pp.setAge(45) fmt.Println(pp.age) //=&gt; 45 pp.setName(&quot;Hari&quot;) fmt.Println(pp.name) //=&gt; Bob &#125;</span><br></code></pre></td></tr></table></figure><p>正如我们在上面的例子中看到的，现在可以使用点运算符来调用该方法，如 <code>pp.describe</code>。请注意，<em>receiver</em> 是一个指针。使用指针，我们传递的是一个值的引用，所以如果我们在方法中做任何改变，都会反映在 <em>receiver</em> pp中。它也不会创建一个新的对象的副本，这就节省了内存。</p><p>请注意，在上面的例子中，年龄的值被改变了，而名字的值没有改变，因为setName方法是 <em>receiver</em> 类型的，而 setAge 是指针类型的。</p><h4 id="接口（Interfaces）"><a href="#接口（Interfaces）" class="headerlink" title="接口（Interfaces）"></a>接口（Interfaces）</h4><p>Go 接口（interfaces）是一个方法（methods）的集合。接口有助于将一个类型的属性组合在一起。让我们以一个接口 animal 为例：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> animal <span class="hljs-keyword">interface</span> &#123; description() <span class="hljs-type">string</span> &#125;<br></code></pre></td></tr></table></figure><p>animal 是一个接口（interface）类型。现在让我们创建两个不同类型的 animal，它们都实现了 animal 接口类型：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> ) <span class="hljs-keyword">type</span> animal <span class="hljs-keyword">interface</span> &#123; description() <span class="hljs-type">string</span> &#125; <span class="hljs-keyword">type</span> cat <span class="hljs-keyword">struct</span> &#123; Type <span class="hljs-type">string</span> Sound <span class="hljs-type">string</span> &#125; <span class="hljs-keyword">type</span> snake <span class="hljs-keyword">struct</span> &#123; Type <span class="hljs-type">string</span> Poisonous <span class="hljs-type">bool</span> &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(s snake)</span></span> description() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Poisonous: %v&quot;</span>, s.Poisonous) &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c cat)</span></span> description() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;Sound: %v&quot;</span>, c.Sound) &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-keyword">var</span> a animal a = snake&#123;Poisonous: <span class="hljs-literal">true</span>&#125; fmt.Println(a.description()) a = cat&#123;Sound: <span class="hljs-string">&quot;Meow!!!&quot;</span>&#125; fmt.Println(a.description()) &#125; <span class="hljs-comment">//=&gt; Poisonous: true //=&gt; Sound: Meow!!!</span><br></code></pre></td></tr></table></figure><p>type cat struct {<br>在主函数中，我们创建一个动物类型的变量 <code>a</code>。我们给动物分配一个 snake 和一个 cat 的类型，并使用 Println 来打印 a.description。由于我们在两种类型（cat 和 snake）中都以不同的方式实现了 describe 方法，我们得到了打印的动物描述。</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>我们把Go的所有代码都写在一个包里。<strong>main</strong> package 是程序执行的入口点。Go 中有很多内置包。我们一直在使用的最著名的是<strong>fmt</strong>包。</p><blockquote><p>“Go 软件包是 Go 提供的大型编程的主要机制，它们使得将一个大型项目分割成小块成为可能。”<br>— Robert Griesemer</p></blockquote><h4 id="Installing-a-package-安装一个包"><a href="#Installing-a-package-安装一个包" class="headerlink" title="Installing a package (安装一个包)"></a>Installing a package (安装一个包)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go get &lt;package-url-github&gt; // example go get github.com/satori/go.uuid<br></code></pre></td></tr></table></figure><p>我们安装的软件包被保存在 GOPATH 环境变量设置的工作目录。你可以通过进入我们工作目录下的 pkg 文件夹 <code>cd $GOPATH/pkg</code> 来查看这些软件包。</p><h4 id="创建自定义包"><a href="#创建自定义包" class="headerlink" title="创建自定义包"></a>创建自定义包</h4><p>让我们先创建一个文件夹 custom_package：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> custom_package &gt; <span class="hljs-built_in">cd</span> custom_package</span><br></code></pre></td></tr></table></figure><p>要创建一个自定义包，我们需要首先创建一个文件夹，并加上我们需要的包名。比方说，我们要建立一个 <code>person</code> 包。为此，让我们在 <code>custom_package</code> 文件夹中创建一个名为 <code>person</code> 的文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> person &gt; <span class="hljs-built_in">cd</span> person</span><br></code></pre></td></tr></table></figure><p>现在让我们在这个文件夹中创建一个文件 person.go。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> person <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Description</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;The person name is: &quot;</span> + name &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">secretName</span><span class="hljs-params">(name <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Do not share&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>我们现在需要安装这个包，以便它可以被导入和使用。因此，让我们来安装它：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">go install</span><br></code></pre></td></tr></table></figure><p>现在让我们回到custom_package文件夹，创建一个 main.go 文件</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span>( <span class="hljs-string">&quot;custom_package/person&quot;</span> <span class="hljs-string">&quot;fmt&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; p := person.Description(<span class="hljs-string">&quot;Milap&quot;</span>) fmt.Println(p) &#125; <span class="hljs-comment">// =&gt; The person name is: Milap</span><br></code></pre></td></tr></table></figure><p>在这里，我们现在可以导入我们创建的包 <code>person</code> 并使用函数 Description。注意，我们在包中创建的函数 <code>secretName</code> 将不能被访问。在 Go 中，没有大写字母开头的方法名称将是私有的。</p><h4 id="包文档"><a href="#包文档" class="headerlink" title="包文档"></a>包文档</h4><p>Go内置了对包的文档支持。运行以下命令来生成文档：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">godoc person Description<br></code></pre></td></tr></table></figure><p>这将为我们的包 person 里面的描述函数生成文档。要看到这些文档，请使用以下命令运行一个网络服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">godoc -http=&quot;:8080&quot;<br></code></pre></td></tr></table></figure><p>现在去URL <a href="http://localhost:6060/pkg/">http://localhost:8080/pkg/</a>，看看我们刚刚创建的包的文档。</p><h4 id="Go-内置包"><a href="#Go-内置包" class="headerlink" title="Go 内置包"></a>Go 内置包</h4><p><strong>fmt</strong></p><p>该包实现了格式化的 I&#x2F;O 函数。我们已经用这个包实现了向 stdout 打印的功能。</p><p><strong>json</strong></p><p>Go中另一个有用的包是json包。这有助于对JSON进行编码&#x2F;解码。让我们举个例子，对一些 JSON 进行编码&#x2F;解码：</p><p>编码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-string">&quot;encoding/json&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; mapA := <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>&#123;<span class="hljs-string">&quot;apple&quot;</span>: <span class="hljs-number">5</span>, <span class="hljs-string">&quot;lettuce&quot;</span>: <span class="hljs-number">7</span>&#125; mapB, _ := json.Marshal(mapA) fmt.Println(<span class="hljs-type">string</span>(mapB)) &#125;<br></code></pre></td></tr></table></figure><p>解码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-string">&quot;encoding/json&quot;</span> ) <span class="hljs-keyword">type</span> response <span class="hljs-keyword">struct</span> &#123; PageNumber <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;page&quot;`</span> Fruits []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;fruits&quot;`</span> &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; str := <span class="hljs-string">`&#123;&quot;page&quot;: 1, &quot;fruits&quot;: [&quot;apple&quot;, &quot;peach&quot;]&#125;`</span> res := response&#123;&#125; json.Unmarshal([]<span class="hljs-type">byte</span>(str), &amp;res) fmt.Println(res.PageNumber) &#125; <span class="hljs-comment">//=&gt; 1</span><br></code></pre></td></tr></table></figure><p>当使用 unmarshal 解码 json 字节时，第一个参数是 json 字节，第二个参数是我们希望 json 被映射到的响应类型结构的地址。注意，<code>json: &quot;page&quot;</code>将页面键映射到结构中的 PageNumber 键。</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><p>错误是指程序中不想要的和意外的结果。比方说，我们正在对一个外部服务进行 API 调用。这个 API 调用可能是成功的，也可能是失败的。当错误类型出现时，Go 程序中的错误可以被识别。让我们看看这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">resp, err := http.Get(<span class="hljs-string">&quot;http://example.com/&quot;</span>)<br></code></pre></td></tr></table></figure><p>在这里，对错误对象的 API 调用可能通过也可能失败。我们可以检查错误是否为零或存在，并相应地处理响应：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-string">&quot;net/http&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; resp, err := http.Get(<span class="hljs-string">&quot;http://example.com/&quot;</span>) <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123; fmt.Println(err) <span class="hljs-keyword">return</span> &#125; fmt.Println(resp) &#125;<br></code></pre></td></tr></table></figure><h4 id="从函数返回自定义错误"><a href="#从函数返回自定义错误" class="headerlink" title="从函数返回自定义错误"></a>从函数返回自定义错误</h4><p>当我们在编写自己的函数时，有些情况下会出现错误。这些错误可以在错误对象的帮助下返回：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Increment</span><span class="hljs-params">(n <span class="hljs-type">int</span>)</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123; <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">0</span> &#123; <span class="hljs-comment">// return error object return nil, errors.New(&quot;math: cannot process negative number&quot;) &#125; return (n + 1), nil &#125; func main() &#123; num := 5 if inc, err := Increment(num); err != nil &#123; fmt.Printf(&quot;Failed Number: %v, error message: %v&quot;, num, err) &#125;else &#123; fmt.Printf(&quot;Incremented Number: %v&quot;, inc) &#125; &#125;</span><br></code></pre></td></tr></table></figure><p>大多数 Go 中内置的包，或者我们使用的外部包，都有一个错误处理的机制。所以我们调用的任何函数都有可能出现错误。这些错误绝不应该被忽视，总是在我们调用这些函数的地方优雅地处理，正如我们在上面的例子中所做的那样。</p><h4 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h4><p>Panic 是指在程序执行过程中突然遇到的未被处理的东西。在Go中，Panic 不是处理程序中异常的理想方式。建议使用一个错误对象来代替。当 Panic 发生时，程序的执行会被停止。Panic 发生后被执行的东西是 defer。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">//Go package main import &quot;fmt&quot; func main() &#123; f() fmt.Println(&quot;Returned normally from f.&quot;) &#125; func f() &#123; defer func() &#123; if r := recover(); r != nil &#123; fmt.Println(&quot;Recovered in f&quot;, r) &#125; &#125;() fmt.Println(&quot;Calling g.&quot;) g(0) fmt.Println(&quot;Returned normally from g.&quot;) &#125; func g(i int) &#123; if i &gt; 3 &#123; fmt.Println(&quot;Panicking!&quot;) panic(fmt.Sprintf(&quot;%v&quot;, i)) &#125; defer fmt.Println(&quot;Defer in g&quot;, i) fmt.Println(&quot;Printing in g&quot;, i) g(i + 1) &#125;</span><br></code></pre></td></tr></table></figure><h4 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h4><p>Defer 是指总是在函数的末尾被执行的东西。</p><p>在上面的例子中，我们用 panic() 使程序的执行陷入 panic。正如你所注意到的，这里有一个 defer 语句，它将使程序在最后执行这一行。当我们需要在函数结束时执行一些东西时也可以使用 defer，例如关闭一个文件。</p><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>Go 是在考虑到并发性的情况下建立的。Go 中的并发性可以通过 Go 协程实现，它是轻量级的线程。</p><p><strong>Go 协程</strong></p><p>Go 协程是可以与另一个函数并行或同时运行的函数。创建一个 Go 协程非常简单。只需在一个函数前面加上关键字 Go，我们就可以让它并行执行。Go 协程是非常轻量级的，所以我们可以创建成千上万的协程。让我们来看看一个简单的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-string">&quot;time&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; <span class="hljs-keyword">go</span> c() fmt.Println(<span class="hljs-string">&quot;I am main&quot;</span>) time.Sleep(time.Second * <span class="hljs-number">2</span>) &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">c</span><span class="hljs-params">()</span></span> &#123; time.Sleep(time.Second * <span class="hljs-number">2</span>) fmt.Println(<span class="hljs-string">&quot;I am concurrent&quot;</span>) &#125; <span class="hljs-comment">//=&gt; I am main //=&gt; I am concurrent</span><br></code></pre></td></tr></table></figure><p>正如你在上面的例子中所看到的，函数 c 是一个 Go 协程，与 Go 主线程并行执行。有些时候，我们希望在多个线程之间共享资源。Go 倾向于不将一个线程的变量与另一个线程共享，因为这样会增加死锁和资源等待的可能性。还有一种方法可以在 Go 协程之间共享资源：通过 Go channels。</p><p><strong>通道</strong></p><p>我们可以使用通道在两个 Go 协程之间传递数据。在创建 channel 时，有必要指定该 channel 接收什么样的数据。让我们创建一个简单的字符串类型的 channel，如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)<br></code></pre></td></tr></table></figure><p>通过这个 channel，我们可以发送字符串类型的数据。我们可以在这个 channel 中发送和接收数据:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; c := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span>&#123; c &lt;- <span class="hljs-string">&quot;hello&quot;</span> &#125;() msg := &lt;-c fmt.Println(msg) &#125; <span class="hljs-comment">//=&gt;&quot;hello&quot;</span><br></code></pre></td></tr></table></figure><p>接收方 channel 等待，直到发送方发送数据到 channel。</p><p><strong>单向通道</strong></p><p>有些情况下，我们希望 Go 程序通过 channel 接收数据，但不发送数据，反之亦然。为此，我们也可以创建一个<strong>单向 channel</strong>。让我们来看看一个简单的例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-keyword">go</span> sc(ch) fmt.Println(&lt;-ch) &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sc</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span>&lt;- <span class="hljs-type">string</span>)</span></span> &#123; ch &lt;- <span class="hljs-string">&quot;hello&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，<code>sc</code> 是一个 Go 协程，它只能向通道发送消息，但不能接收消息。</p><h3 id="使用-select-为-Go-例程组织多个通道"><a href="#使用-select-为-Go-例程组织多个通道" class="headerlink" title="使用 select 为 Go 例程组织多个通道"></a>使用 select 为 Go 例程组织多个通道</h3><p>一个函数可能有多个 channel 在等待。为此，我们可以使用一个选择（select）语句。让我们看一个例子，以了解更清楚的情况：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> ( <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-string">&quot;time&quot;</span> ) <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; c1 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) c2 := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>) <span class="hljs-keyword">go</span> speed1(c1) <span class="hljs-keyword">go</span> speed2(c2) fmt.Println(<span class="hljs-string">&quot;The first to arrive is:&quot;</span>) <span class="hljs-keyword">select</span> &#123; <span class="hljs-keyword">case</span> s1 := &lt;-c1: fmt.Println(s1) <span class="hljs-keyword">case</span> s2 := &lt;-c2: fmt.Println(s2) &#125; &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">speed1</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123; time.Sleep(<span class="hljs-number">2</span> * time.Second) ch &lt;- <span class="hljs-string">&quot;speed 1&quot;</span> &#125; <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">speed2</span><span class="hljs-params">(ch <span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>)</span></span> &#123; time.Sleep(<span class="hljs-number">1</span> * time.Second) ch &lt;- <span class="hljs-string">&quot;speed 2&quot;</span> &#125;<br></code></pre></td></tr></table></figure><p>在上面的例子中，main正在等待两个 channel，c1 和 c2。通过 select case 语句，main 函数打印出，信息从它先收到的 channel 中发送出来。</p><p><strong>带缓冲的通道</strong></p><p>你可以在go中创建一个缓冲 channel。有了缓冲 channel，如果缓冲区满了，发送到该 channel 的消息就会被阻断。让我们看一下这个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main <span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">string</span>, <span class="hljs-number">2</span>) ch &lt;- <span class="hljs-string">&quot;hello&quot;</span> ch &lt;- <span class="hljs-string">&quot;world&quot;</span> ch &lt;- <span class="hljs-string">&quot;!&quot;</span> # extra message in buffer fmt.Println(&lt;-ch) &#125; <span class="hljs-comment">// =&gt; fatal error: all goroutines are asleep - deadlock!</span><br></code></pre></td></tr></table></figure><p>正如我们在上面看到的，一个 channel 接受的信息不超过2条。</p><h4 id="为什么-Golang-会成功？"><a href="#为什么-Golang-会成功？" class="headerlink" title="为什么 Golang 会成功？"></a>为什么 Golang 会成功？</h4><blockquote><p>简洁性… — Rob-pike</p></blockquote><h3 id="Great"><a href="#Great" class="headerlink" title="Great"></a>Great</h3><p>我们学习了 Go 的一些主要组成部分和特点。</p><ol><li>变量、数据类型</li><li>数组 切片 和 maps</li><li>函数</li><li>循环和条件语句</li><li>指针</li><li>软件包</li><li>方法、结构体和接口</li><li>错误处理</li><li>并发 - Go 协程和通道</li></ol><p>恭喜你，你现在对 Go 有了相当的了解。</p><blockquote><p>我最有成效的一天是减少了 1000 行代码。<br>— Ken Thompson</p></blockquote><p>不要停在这里，继续向前推进，思考一个小的应用并开始创建。</p><p><a href="https://www.linkedin.com/in/milap-neupane-99a4b565/">LinkedIn</a><br><a href="http://github.com/milap-neupane">Github</a><br><a href="https://twitter.com/_milap">Twitter</a></p><p>我也在 Milap Neupane 博客发布本文：<a href="https://milapneupane.com.np/2019/07/06/learning-golang-from-zero-to-hero/">学习Go，从0到1</a></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello-world</title>
    <link href="/2023/12/02/hello-world/"/>
    <url>/2023/12/02/hello-world/</url>
    
    <content type="html"><![CDATA[<blockquote><p>REALITY 使用其它端口貌似也具有相同伪装性（不打保证），对于自己服务器上已经有站点的，也不用为了共存另外设置反向代理或分流之类的，直接使用其它端口就可以了。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>```routeros<br>[信息] 已重启 xray 服务<br>-------------- client config --------------<br>address     : <span class="hljs-string">&quot;45.32.50.85&quot;</span><br>port        : 8443<br>protocol    : <span class="hljs-string">&quot;vless&quot;</span><br><span class="hljs-built_in">id</span>          : <span class="hljs-string">&quot;422939fd-f699-4a26-a6d7-61e17ee3dd88&quot;</span><br>flow        : <span class="hljs-string">&quot;xtls-rprx-vision&quot;</span><br>network     : <span class="hljs-string">&quot;tcp&quot;</span><br>TLS         : <span class="hljs-string">&quot;reality&quot;</span><br>SNI         : <span class="hljs-string">&quot;lovelive-anime.jp&quot;</span>,<span class="hljs-string">&quot;www.lovelive-anime.jp&quot;</span><br>Fingerprint : <span class="hljs-string">&quot;chrome&quot;</span><br>PublicKey   : <span class="hljs-string">&quot;LRrsQXaa2O2LWICHuZ9rY3vq9mC7m2iHxjLEikS3xBA&quot;</span><br>ShortId     : <span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;6d&quot;</span>,<span class="hljs-string">&quot;85dd&quot;</span>,<span class="hljs-string">&quot;e04cccd5&quot;</span>,<span class="hljs-string">&quot;5042dcec226b1621&quot;</span><br>SpiderX     : <span class="hljs-string">&quot;/&quot;</span><br>------------------------------------------<br>是否生成分享链接[y/n]:<br></code></pre></td></tr></table></figure><!-- 块引用 --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">iptables -<span class="hljs-selector-tag">I</span> <span class="hljs-selector-tag">INPUT</span> -<span class="hljs-selector-tag">p</span> tcp <span class="hljs-attr">--dport</span> <span class="hljs-number">443</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>以后要进入这个管理脚本界面输入 <code>bash Xray-script.sh</code> 这个<strong>命令</strong>就可以进入了，<em>现在</em>别管<strong>dsd</strong>。</p><div class="note note-success">            <p>这是一段 success 效果测试代码</p>          </div><div class="note note-info">            <p>这是一段 info 效果测试代码</p>          </div><div class="note note-warning">            <p>这是一段 warning 效果测试代码</p>          </div><div class="note note-danger">            <p>这是一段 danger 效果测试代码</p>          </div><div class="note note-primary">            <p>这是一段 primary 效果测试代码</p>          </div><p><img src="https://i0.wp.com/www.additudemag.com/wp-content/uploads/2016/11/78_8_Diagnose_Kids_Autism-Misdiagnosis_Slideshow_78_girl-father-playroom_ts_83480810.jpg"></p><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New    Post   &quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python学习</title>
    <link href="/2023/12/02/python%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/12/02/python%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-学习"><a href="#Python-学习" class="headerlink" title="Python 学习"></a>Python 学习</h1><h2 id="1-Python-简介"><a href="#1-Python-简介" class="headerlink" title="1. Python 简介"></a>1. Python 简介</h2><div class="note note-info">            <ol><li><p>Python 是一种解释型、面向对象、动态数据类型的高级程序设计语言。Python 由 Guido van Rossum 于 1989 年底发明，第一个公开发行版发行于<br>1991 年。Python 语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。</p></li><li><p>Python 具有丰富和强大的库。它常被昵称为胶水语言，它能够把用其他语言制作的各种模块（尤其是 C&#x2F;C++）很轻松地联结在一起。常见的一种应用情形是，使用<br>Python<br>快速生成程序的原型（有时甚至是程序的最终界面），然后对其中<a href="https://zh.wikipedia.org/wiki/%E7%89%B9%E5%88%A5%E9%AB%94%E7%B3%BB">有特别要求的部分</a><br>，用更合适的语言改写，比如<a href="https://zh.wikipedia.org/wiki/CPython">3D 游戏中的图形渲染模块，CPython</a>就是这样产生的。</p></li><li><p>Python 解释器本身几乎可以在所有的操作系统中运行。Python 的官方解释器 CPython 是用 C<br>语言编写的、是一个<a href="https://zh.wikipedia.org/wiki/%E9%96%8B%E6%BA%90%E8%BB%9F%E9%AB%94">开源软件</a><br>，目前由<a href="https://zh.wikipedia.org/wiki/Python%E8%BB%9F%E4%BB%B6%E5%9F%BA%E9%87%91%E6%9C%83">Python 软件基金会</a><br>管理。它是一个<a href="https://zh.wikipedia.org/wiki/%E7%A4%BE%E7%BE%A4%E9%A9%85%E5%8B%95">社群驱动</a><br>的<a href="https://zh.wikipedia.org/wiki/%E8%87%AA%E7%94%B1%E8%BB%9F%E9%AB%94">自由软件</a><br>，源代码和<a href="https://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8">解释器实现</a><br>遵循<a href="https://zh.wikipedia.org/wiki/GNU%E9%80%A3%E7%8E%AF%E5%85%AC%E5%85%B1%E8%A8%B1%E5%8F%AF%E8%AD%89">GPL</a>（GNU<br>General Public<br>License）或<a href="https://zh.wikipedia.org/wiki/Python%E8%BB%9F%E4%BB%B6%E5%9F%BA%E9%87%91%E6%9C%83%E8%A8%B1%E5%8F%AF%E5%8D%94%E8%AD%B0%E6%9D%A1%E7%B4%84">Python 软件基金会许可协议</a><br>（Python Software Foundation License）。</p></li></ol>          </div><h2 id="2-Python-安装"><a href="#2-Python-安装" class="headerlink" title="2. Python 安装"></a>2. Python 安装</h2><h3 id="2-1-Windows"><a href="#2-1-Windows" class="headerlink" title="2.1. Windows"></a>2.1. Windows</h3><h4 id="2-1-1-下载"><a href="#2-1-1-下载" class="headerlink" title="2.1.1. 下载"></a>2.1.1. 下载</h4><p><a href="https://www.python.org/downloads/">Python 官网</a>下载最新版本的 Python，目前最新版本为 3.9.1。</p><h4 id="2-1-2-安装"><a href="#2-1-2-安装" class="headerlink" title="2.1.2. 安装"></a>2.1.2. 安装</h4><blockquote><p>安装时注意勾选 <code>Add Python 3.9 to PATH</code>，这样就可以在命令行中直接使用 <code>python</code> 命令。</p></blockquote><h4 id="2-1-3-验证"><a href="#2-1-3-验证" class="headerlink" title="2.1.3. 验证"></a>2.1.3. 验证</h4><blockquote><p>在命令行中输入 <code>python</code>，如果出现以下信息，则说明安装成功。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>, ...<br></code></pre></td></tr></table></figure><h3 id="2-2-Linux"><a href="#2-2-Linux" class="headerlink" title="2.2. Linux"></a>2.2. Linux</h3><h4 id="2-2-1-下载"><a href="#2-2-1-下载" class="headerlink" title="2.2.1. 下载"></a>2.2.1. 下载</h4><p><a href="https://www.python.org/downloads/">Python 官网</a>下载最新版本的 Python，目前最新版本为 3.9.1。</p><h4 id="2-2-2-安装"><a href="#2-2-2-安装" class="headerlink" title="2.2.2. 安装"></a>2.2.2. 安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 下载</span><br>wget https://www.python.org/ftp/python/3.9.1/Python-3.9.1.tgz<br><span class="hljs-comment"># 解压</span><br>tar -zxvf Python-3.9.1.tgz<br><span class="hljs-comment"># 进入目录</span><br><span class="hljs-built_in">cd</span> Python-3.9.1<br><span class="hljs-comment"># 配置</span><br>./configure --prefix=/usr/local/python3<br><span class="hljs-comment"># 编译</span><br>make<br><span class="hljs-comment"># 安装</span><br>make install<br></code></pre></td></tr></table></figure><h4 id="2-2-3-验证"><a href="#2-2-3-验证" class="headerlink" title="2.2.3. 验证"></a>2.2.3. 验证</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span><br>python3 -V<br><span class="hljs-comment"># 进入交互式环境</span><br>python3<br></code></pre></td></tr></table></figure><h3 id="2-3-Mac"><a href="#2-3-Mac" class="headerlink" title="2.3. Mac"></a>2.3. Mac</h3><h4 id="2-3-1-下载"><a href="#2-3-1-下载" class="headerlink" title="2.3.1. 下载"></a>2.3.1. 下载</h4><p><a href="https://www.python.org/downloads/">Python 官网</a> 下载最新版本的 Python，目前最新版本为 3.9.1。</p><h4 id="2-3-2-安装"><a href="#2-3-2-安装" class="headerlink" title="2.3.2. 安装"></a>2.3.2. 安装</h4><div class="note note-warning">            <p>安装时注意勾选 <code>Add Python 3.9 to PATH</code>，这样就可以在命令行中直接使用 <code>python</code> 命 令。<br>如果安装失败，可以尝试使用 <code>brew</code> 安装。</p>          </div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">brew install python3<br></code></pre></td></tr></table></figure><h4 id="2-3-3-验证测试"><a href="#2-3-3-验证测试" class="headerlink" title="2.3.3. 验证测试"></a>2.3.3. 验证测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看版本</span><br>python3 -V<br><span class="hljs-comment"># 进入 交互式环境</span><br>python3<br></code></pre></td></tr></table></figure><h2 id="3-Python-基础"><a href="#3-Python-基础" class="headerlink" title="3. Python 基础"></a>3. Python 基础</h2><h3 id="3-1-Python-交互式环境"><a href="#3-1-Python-交互式环境" class="headerlink" title="3.1. Python 交互式环境"></a>3.1. Python 交互式环境</h3><p>在命令行中输入 <code>python</code>，进入 Python 交互式环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec  7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32<br>Type <span class="hljs-string">&quot;help&quot;</span>, <span class="hljs-string">&quot;copyright&quot;</span>,<br></code></pre></td></tr></table></figure><h3 id="3-2-Python-注释"><a href="#3-2-Python-注释" class="headerlink" title="3.2. Python 注释"></a>3.2. Python 注释</h3><p>Python 中单行注释以 <code>#</code> 开头， 实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 这是一个注释</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Hello, World!&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="3-3-Python-缩进"><a href="#3-3-Python-缩进" class="headerlink" title="3.3. Python 缩进"></a>3.3. Python 缩进</h3><p>Python 使用缩进来表示代码块，不需要使用大括号 <code>&#123;&#125;</code>，实例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-number">5</span> &gt; <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Five is greater than two!&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>music-tool-kit工具</title>
    <link href="/2023/12/02/music-tool-kit%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/12/02/music-tool-kit%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p><strong>music-tool-kit</strong>，主要使用场景为提取<a href="https://www.youtube.com/">youtube</a>和<a href="https://www.bilibili.com/">bilibili</a>视频中的音频,支持<strong>音频下载</strong>,<strong>元信息自动补全</strong>,<strong>音频截取</strong>,<strong>提取伴奏</strong>,<strong>youtube 列表批量下载</strong>,<strong>自定义批量下载</strong>等.配合<a href="https://open.spotify.com/">spotify</a>的<strong>本地文件</strong>功能可以极大的提升音乐体验(<a href="https://www.bilibili.com/video/BV1VL411T7mp/?vd_source=04c6a0d121b6fb871e3d3c0a2554b29b">教程</a>)</p>          </div><blockquote><p>本项目仅为个人使用,无任何商业用途,仅支持 mp3 格式的音乐</p></blockquote><hr><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m pip install –upgrade pip<br>pip install -U music-tool-kit<br></code></pre></td></tr></table></figure><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/help.webp" alt="help"></p><div class="note note-primary">            <p><strong>准备环境</strong></p><ul><li><a href="https://www.python.org/">python</a>版本:<strong>3.11.0 及以上</strong></li><li>需安装<a href="https://ffmpeg.org/">ffmpeg</a>并正确配置环境变量</li><li>如果需要下载 youtube 的音乐,需要准备<strong>科学上网</strong>环境</li><li><code>[]</code>标记的项目表示可不填</li><li>为规避特殊字符导致路径识别失败,<strong>标题</strong>、<strong>路径</strong>、<strong>URL</strong>等相关的参数尽量使用<strong>双引号</strong></li></ul>          </div><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install -U music-tool-kit<br></code></pre></td></tr></table></figure><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip uninstall music-tool-kit<br></code></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="音乐下载"><a href="#音乐下载" class="headerlink" title="音乐下载"></a>音乐下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk  <span class="hljs-string">&quot;网址&quot;</span> <span class="hljs-string">&quot;[标题]&quot;</span> <span class="hljs-string">&quot;[封面url]&quot;</span><br><br></code></pre></td></tr></table></figure><p><strong>普通下载</strong><br><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/download.webp" alt="download"></p><p><strong>列表下载</strong>使用方法为 <code>mk &quot;列表url | 列表序号&quot;</code> ,<strong>url 需要为 <a href="https://www.youtube.com/">youtube</a> 的列表格式(url 中含有 list&#x3D;)</strong>,如果想下载全部歌曲,直接输入 <code>mk &quot;列表url |&quot;</code> 即可!</p><p>例如:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk <span class="hljs-string">&quot;https://www.youtube.com/playlist?list=PL8B3F8A7B0A9F4DE8 | 1,2,3,4,5&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/batch_download.webp" alt="download_list"></p><div class="note note-info">            <ul><li>标题格式为 <strong>歌曲名-歌手(专辑名)</strong> 输出歌曲格式默认为 <strong>mp3</strong></li><li>music-tool-kit 会根据<strong>标题</strong>,自动将下载的音频元信息补全,包括歌曲名,歌手(艺术家),内置封面图片,以及专辑名称.如果不遵循该标题格式,元信息可能补全失败</li><li>仅支持下载 youtube 的列表下载,url|后面的列表序号之间需要用逗号分隔</li></ul>          </div><h2 id="音乐搜索"><a href="#音乐搜索" class="headerlink" title="音乐搜索"></a>音乐搜索</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk -s <span class="hljs-string">&quot;关键字&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/search.webp" alt="search"><br>支持 youtube bilibili 输出优先级 youtube &gt; bilibili,输入列表序号,输入标题,完成下载</p><div class="note note-info">            <ul><li>最多显示 20 条数据</li><li>直接按<code>Enter</code>可以跳出序号选择界面,输入的序号不能超过最大返回的条目数</li><li>如果不想设置标题 直接按<code>Enter</code>即可</li></ul>          </div><h2 id="音乐剪辑"><a href="#音乐剪辑" class="headerlink" title="音乐剪辑"></a>音乐剪辑</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk -c <span class="hljs-string">&quot;输入的mp3文件&quot;</span> 开始时间 结束时间<br></code></pre></td></tr></table></figure><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/clip.webp" alt="clip"></p><blockquote><p>Tips: 时间格式为 <code>00:00:00</code></p></blockquote><h2 id="提取伴奏"><a href="#提取伴奏" class="headerlink" title="提取伴奏"></a>提取伴奏</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk -e <span class="hljs-string">&quot;输入的mp3文件&quot;</span> [模型名称]<br></code></pre></td></tr></table></figure><p>支持的模型:</p><ul><li><code>UVR_MDXNET_Main</code> (整体较好)</li><li><code>UVR-MDX-NET-Inst_Main</code> (整体较好)</li><li><code>UVR-MDX-NET-Inst_3</code> (整体较好)</li><li><code>UVR-MDX-NET-Inst_HQ_3</code> (整体较好)</li><li><code>UVR_MDXNET_KARA_2</code> (一般,人声剔除不干净,声音忽高忽低)</li><li><code>Kim_Inst</code> (一般)</li></ul><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/inst.webp" alt="extract"></p><div class="note note-warning">            <ul><li>默认模型为<code>UVR_MDXNET_Main</code>,具体请结合音乐类型和自己的实际听感自行调整模型</li><li>伴奏提取比较吃 cpu 性能,时间比较漫长,请耐心等待,大概需要 5~10 分钟</li></ul>          </div><h2 id="csv-批量模板"><a href="#csv-批量模板" class="headerlink" title="csv 批量模板"></a>csv 批量模板</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk -t<br></code></pre></td></tr></table></figure><p>生成的模板文件如下:<br><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/csv_template.webp" alt="csv_template"><br>用户自行填写下载信息,保存后使用<code>mk &quot;csv文件&quot;</code>即可批量下载</p><table><thead><tr><th>url</th><th>title</th><th>cover_url</th><th>start_time</th><th>end_time</th><th>instrumental</th></tr></thead><tbody><tr><td>网址</td><td>标题</td><td>封面 url</td><td>开始时间</td><td>结束时间</td><td>是否生成伴奏(true or false)</td></tr></tbody></table><h2 id="批量下载"><a href="#批量下载" class="headerlink" title="批量下载"></a>批量下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mk <span class="hljs-string">&quot;csv文件&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/img/post/music-tool-kit%E5%B7%A5%E5%85%B7/csv_download.webp" alt="csv_download"></p><h1 id="License"><a href="#License" class="headerlink" title="License"></a>License</h1><p>This work is released under the MIT license. A copy of the license is provided in the <a href="https://raw.githubusercontent.com/nichuanfang/music-tool-kit/main/LICENSE">LICENSE</a> file.</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tools</tag>
      
      <tag>music</tag>
      
      <tag>youtube</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows环境配置</title>
    <link href="/2023/12/02/windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/12/02/windows%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<div class="note note-success">            <p>每次重装系统都需要重新配置一遍环境,索性将配置步骤记录下来,方便以后重装系统后使用</p>          </div><h1 id="windows-环境配置-win10-11"><a href="#windows-环境配置-win10-11" class="headerlink" title="windows 环境配置(win10&#x2F;11)"></a>windows 环境配置(win10&#x2F;11)</h1><h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>下载<a href="https://www.oracle.com/webapps/redirect/signon?nexturl=https://download.oracle.com/otn/java/jdk/8u202-b08/1961070e4c9b4e26a04e7f5a083f551e/jdk-8u202-windows-x64.exe">jdk8 安装包</a>(需要登录 oracle),环境变量设置参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">变量名：JAVA_HOME<br>变量值：D:\soft\java\jdk8<br><br>变量名：CLASSPATH<br>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;<br><br>变量名：Path<br>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <ul><li><code>JAVA_HOME</code>要根据自己的实际路径配置</li><li><code>CLASSPATH</code>记得前面有个”.”</li><li>在<code>Path</code><strong>最前面</strong>新增变量值</li></ul>          </div><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><p>下载 <a href="https://www.python.org/ftp/python/3.11.6/python-3.11.6-amd64.exe">python 安装包</a>,安装之后如果没勾选添加 python.exe 到系统变量,环境变量需要设置参数如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">变量名：PYTHON_HOME<br>变量值：D:\soft\python<br></code></pre></td></tr></table></figure><div class="note note-info">            <ul><li>只有 python 的免安装版本需要配置</li><li><code>PYTHON_HOME</code>的路径根据自己 python 的实际路径配置</li></ul>          </div><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><ol><li><p>下载<a href="https://go.dev/dl/go1.21.4.windows-amd64.msi">go 安装包</a></p></li><li><p>新建环境变量<code>GOROOT</code> ,值为 go 安装目录 例如 D:\soft\go</p></li><li><p>执行下面的命令修改 <code>GOPROXY</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go <span class="hljs-built_in">env</span> -w GOPROXY=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure></li></ol><h3 id="git"><a href="#git" class="headerlink" title="git"></a>git</h3><ol><li><p>下载 <a href="https://github.com/git-for-windows/git/releases/download/v2.43.0.windows.1/Git-2.43.0-64-bit.exe">git 安装包</a>并安装,需要勾选<strong>添加 git 到环境变量</strong></p></li><li><p>配置<code>用户名</code>和<code>邮箱</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>配置<code>代理</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 设置代理</span><br>git config --global http.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:10808&#x27;</span><br>git config --global https.proxy <span class="hljs-string">&#x27;socks5://127.0.0.1:10808&#x27;</span><br><br><span class="hljs-comment"># 取消代理</span><br>git config --global --<span class="hljs-built_in">unset</span> http.proxy<br>git config --global --<span class="hljs-built_in">unset</span> https.proxy<br></code></pre></td></tr></table></figure><blockquote><p>sock5 代理地址根据实际情况修改</p></blockquote></li></ol><h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><ol><li>在<a href="https://archive.apache.org/dist/maven/maven-3/">maven 归档库</a>下载<a href="https://archive.apache.org/dist/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.zip">压缩包</a>,解压缩到软件目录</li><li>新建系统变量 <code>MAVEN_HOME</code> 变量值：<code>D:\soft\apache-maven-3.6.3</code></li><li>在 <code>Path</code> <strong>最后面</strong>添加变量值： <code>;%MAVEN_HOME%\bin</code></li><li>配置 <code>settings.xml</code> 该文件位于 <strong>maven 安装目录 conf</strong>下 配置如下    <div class="fold">      <div class="fold-title fold-success collapsed" data-toggle="collapse" href="#collapse-5b5bd572" role="button" aria-expanded="false" aria-controls="collapse-5b5bd572">        <div class="fold-arrow">▶</div>settings.xml      </div>      <div class='fold-content collapse' id="collapse-5b5bd572">        <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 本地仓库路径 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>D:\mvn_repo<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>      <span class="hljs-comment">&lt;!-- 阿里云镜像 --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 指定jdk版本 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">profiles</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">profile</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>jdk8<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">activation</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">activeByDefault</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">activeByDefault</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">jdk</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">jdk</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">activation</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.compilerVersion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">profile</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">profiles</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure>      </div>    </div></li></ol><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><ol><li>下载<a href="https://dlcdn.apache.org/tomcat/tomcat-8/v8.5.96/bin/apache-tomcat-8.5.96-windows-x64.zip">tomcat 压缩包</a>,解压缩重命名为 tomcat</li><li>新建环境变量<code>TOMCAT_HOME</code>,值为 Tomcat 所在的目录，例如 D:\soft\tomcat</li><li>新建 <code>CATALINA_HOME</code> 和 <code>CATALINA_BASE</code>， 值都设为<code>%TOMCAT_HOME%</code></li><li>打开 <code>PATH</code>，在<strong>最后面</strong>添加变量值：<code>;%CATALINA_HOME%\lib;%CATALINA_HOME%\bin</code></li></ol><h3 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h3><ol><li><p>下载<a href="https://download.jetbrains.com/idea/ideaIU-2023.2.2.exe">idea 安装包</a>和<a href="https://wwdc.lanzouy.com/iwTpX1g33bvg">破解包</a></p></li><li><p>安装 <code>idea</code>,解压破解包到 <code>idea</code> 安装目录</p></li><li><p>将以下内容添加到 idea 安装目录下的<code>idea64.exe.vmoptions</code>中,<code>-javaagent</code>的 <code>ja-netfilter.jar</code> 路径根据自己的实际路径填写</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">-javaagent:D:\soft\IntelliJ IDEA 2023.2.2\jetbra\ja-netfilter.jar=jetbrains<br>--add-opens=java.base/jdk.internal.org.objectweb.asm=ALL-UNNAMED<br>--add-opens=java.base/jdk.internal.org.objectweb.asm.tree=ALL-UNNAMED<br></code></pre></td></tr></table></figure></li><li><p>在<a href="https://33tool.com/idea/">该网站</a>获取激活码,填写到 <code>Activation code</code>中,激活成功</p></li></ol><blockquote><p>不用关心激活时间，它是后备许可证，不会过期</p></blockquote><h2 id="其他软件"><a href="#其他软件" class="headerlink" title="其他软件"></a>其他软件</h2><h3 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h3><ol><li>下载<a href="https://www.gyan.dev/ffmpeg/builds/ffmpeg-git-full.7z">压缩包</a>,解压缩后重命名为 <code>ffmpeg</code></li><li>打开<code>PATH</code>,在<strong>最后面</strong>添加环境变量值: <code>;D:\soft\ffmpeg\bin</code></li></ol><h3 id="yt-dlp"><a href="#yt-dlp" class="headerlink" title="yt-dlp"></a>yt-dlp</h3><ol><li>下载<a href="https://github.com/yt-dlp/yt-dlp/releases/download/2023.11.16/yt-dlp.exe">exe 执行文件</a>,新建<code>D:\soft\yt-dlp</code>目录,将 <code>yt-dlp.exe</code>移动到该目录</li><li>打开<code>PATH</code>,在<strong>最后面</strong>添加环境变量值: <code>;D:\soft\yt-dlp</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主题模板食用说明</title>
    <link href="/2023/12/02/%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E/"/>
    <url>/2023/12/02/%E4%B8%BB%E9%A2%98%E6%A8%A1%E6%9D%BF%E9%A3%9F%E7%94%A8%E8%AF%B4%E6%98%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="主题模板食用说明"><a href="#主题模板食用说明" class="headerlink" title="主题模板食用说明~~"></a>主题模板食用说明~~</h1><h2 id="Front-matter-说明"><a href="#Front-matter-说明" class="headerlink" title="Front-matter 说明"></a>Front-matter 说明</h2><ol><li><code>tags</code>: 标签</li><li><code>categories</code>: 分类</li><li><code>index_img_url</code>: 首页缩略图 url 如果配置将忽略当前文件夹的 index.jpg</li><li><code>banner_img_url</code>: 文章配图 url 如果配置将忽略当前文件夹的 banner.jpg</li><li><code>banner_img_ratio</code>: banner 图片比例</li><li><code>sticky</code>: 置顶配置 数字越大优先级越高</li></ol><div class="note note-info">            <ul><li>如果配置了 index_img_url,则当前文件夹下的 index.jpg 无效</li><li>如果配置了 banner_img_url,则当前文件夹下的 banner.jpg 无效</li><li>如果只配置了 banner_img_url,则 index_img 使用相同的图片源</li><li>如果只配置了 index.jpg 或者 banner.jpg,则另一个缺省为 同一个图片</li></ul>          </div><h2 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h2><p>在 markdown 中加入如下的代码来使用便签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% note success %&#125;<br>文字 或者 `markdown` 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure><p>可选便签：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><div class="note note-danger">            <p>danger</p>          </div><div class="note note-warning">            <p>warning</p>          </div><div class="note note-info">            <p>info</p>          </div><div class="note note-light">            <p>light</p>          </div><blockquote><p>使用 primary 时 <code>note primary</code> 和 <code>endnote</code> 需单独一行，否则会出现问题</p></blockquote><h2 id="折叠块"><a href="#折叠块" class="headerlink" title="折叠块"></a>折叠块</h2><p>使用折叠块，可以折叠代码、图片、文字等任何内容，你可以在 markdown 中按如下格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% <span class="hljs-built_in">fold</span> info @title %&#125;<br>需要折叠的一段内容，支持 markdown<br>&#123;% endfold %&#125;<br></code></pre></td></tr></table></figure><blockquote><p>info: 和行内标签类似的可选参数 title: 折叠块上的 标题</p></blockquote><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>作品</li><li>工具</li><li>技术</li><li>应用</li><li>方法</li><li>杂谈</li><li>其他</li></ol><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><p>Tags 根据需要灵活添加，但应避免添加太细的 tag 以避免膨胀，例如</p><ol><li>linux</li><li>web</li><li>windows</li><li>Ubuntu</li><li>机器学习</li><li>大数据</li><li>docker</li><li>分布式</li><li>计算机网络</li><li>设计</li><li>工具</li><li>日志</li><li>编程语言</li><li>计算机软件</li><li>软件工程</li><li>听歌</li><li>java</li><li>spring</li><li>redis</li><li>python</li></ol>]]></content>
    
    
    <categories>
      
      <category>应用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>泛域名证书申请</title>
    <link href="/2023/12/02/%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/"/>
    <url>/2023/12/02/%E6%B3%9B%E5%9F%9F%E5%90%8D%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="泛域名证书申请-Ubuntu-20"><a href="#泛域名证书申请-Ubuntu-20" class="headerlink" title="泛域名证书申请 (Ubuntu 20)"></a>泛域名证书申请 (Ubuntu 20)</h1><blockquote><p>全网 HTTPS 时代就要到来，<a href="https://letsencrypt.org/">Let’s Encrypt</a> 三个月有效期的免费 HTTPS 证书现在支持泛域名了，我们可以通过 <a href="https://certbot.eff.org/">Certbot</a> 非常方便的申请和更新证书。网上很多关于 Certbot 的文章，但是关于泛域名证书的自动更新很少提及，或者很多误区，这里简单的讲解一下。</p></blockquote><h2 id="一丶-Certbot-安装"><a href="#一丶-Certbot-安装" class="headerlink" title="一丶 Certbot 安装"></a>一丶 Certbot 安装</h2><p>安装非常简单，只要进入 Certbot 官网选择对应的系统和 Web 服务软件就会提示如何安装，按照提示操作就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">apt-get update<br>apt-get install software-properties-common<br>add-apt-repository universe<br>add-apt-repository ppa:certbot/certbot<br>apt-get update<br>apt-get install python3-certbot-nginx<br></code></pre></td></tr></table></figure><h2 id="二丶-申请泛域名证书"><a href="#二丶-申请泛域名证书" class="headerlink" title="二丶 申请泛域名证书"></a>二丶 申请泛域名证书</h2><p>这里用到了一个开源工具：<a href="https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au">certbot-letencrypt-wildcardcertificates-alydns-au</a>工具就不介绍了，点开链接作者写的很详细了，看看怎么用吧</p><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/code<br>git <span class="hljs-built_in">clone</span> https://github.com/ywdblog/certbot-letencrypt-wildcardcertificates-alydns-au<br><span class="hljs-built_in">mv</span> certbot-letencrypt-wildcardcertificates-alydns-au certbot<br><span class="hljs-built_in">cd</span> certbot<br><span class="hljs-built_in">chmod</span> 777 au.sh<br><br></code></pre></td></tr></table></figure><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><h4 id="1-domain-ini"><a href="#1-domain-ini" class="headerlink" title="(1) domain.ini"></a>(1) domain.ini</h4><div class="note note-warning">            <p>如果 domain.ini 文件没有你的根域名，请自行添加</p>          </div><h4 id="2-DNS-API-密钥"><a href="#2-DNS-API-密钥" class="headerlink" title="(2) DNS API 密钥"></a>(2) DNS API 密钥</h4><p><code>ALY_KEY</code>和 <code>ALY_TOKEN</code>：阿里云 <a href="https://help.aliyun.com/knowledge_detail/38738.html">API key 和 Secrec 官方申请文档</a><br><img width="914" alt="屏幕截图 2023-03-30 235738" src="https://user-images.githubusercontent.com/37105637/228915797-20625aa4-5263-4817-9e11-90f7a9484999.png"></p><h4 id="3-修改-au-sh-的-python-版本"><a href="#3-修改-au-sh-的-python-版本" class="headerlink" title="(3) 修改 au.sh 的 python 版本"></a>(3) 修改 au.sh 的 python 版本</h4><p><img src="https://user-images.githubusercontent.com/37105637/228916010-d1fcf8c3-404b-4d2a-8712-98cbc979b59e.png" alt="image"></p><h4 id="4-选择运行环境"><a href="#4-选择运行环境" class="headerlink" title="(4) 选择运行环境"></a>(4) 选择运行环境</h4><p>Python(支持 2.7 和 3.7，无需任何第三方库) Python 操作阿里云 DNS，增加&#x2F;清空 DNS。<br><code>au.sh python aly add/clean</code></p><h4 id="5-注释掉报错代码"><a href="#5-注释掉报错代码" class="headerlink" title="(5) 注释掉报错代码"></a>(5) 注释掉报错代码</h4><p><img src="https://user-images.githubusercontent.com/37105637/228916235-4e1b4a31-a4c6-4545-8163-17452ceb5d90.png" alt="image"></p><h3 id="3-申请证书"><a href="#3-申请证书" class="headerlink" title="3. 申请证书"></a>3. 申请证书</h3><p>测试是否有错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certbot certonly  -d *.example.com --manual --preferred-challenges dns --dry-run  --manual-auth-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly add&quot;</span> --manual-cleanup-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly clean&quot;</span><br></code></pre></td></tr></table></figure><p><strong>实际申请:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certbot certonly  -d *.example.com --manual --preferred-challenges dns --manual-auth-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly add&quot;</span> --manual-cleanup-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly clean&quot;</span><br></code></pre></td></tr></table></figure><h3 id="4-续期证书"><a href="#4-续期证书" class="headerlink" title="4. 续期证书"></a>4. 续期证书</h3><h4 id="对机器上所有证书-renew"><a href="#对机器上所有证书-renew" class="headerlink" title="对机器上所有证书 renew"></a>对机器上所有证书 renew</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">certbot renew  --manual --preferred-challenges dns --manual-auth-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly add&quot;</span> --manual-cleanup-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly clean&quot;</span><br></code></pre></td></tr></table></figure><h4 id="对某一张证书进行续期"><a href="#对某一张证书进行续期" class="headerlink" title="对某一张证书进行续期"></a>对某一张证书进行续期</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#先看看机器上有多少证书：</span><br>certbot certificates<br><span class="hljs-comment">#记住证书名，比如 simplehttps.com，然后运行下列命令 renew</span><br>certbot renew --cert-name simplehttps.com  --manual-auth-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly add&quot;</span> --manual-cleanup-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly clean&quot;</span><br></code></pre></td></tr></table></figure><h2 id="三丶-加入-crontab"><a href="#三丶-加入-crontab" class="headerlink" title="三丶 加入 crontab"></a>三丶 加入 crontab</h2><p>编写证书更新脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>docker stop nginx<br>certbot renew --cert-name example.com --manual-auth-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly add&quot;</span> --manual-cleanup-hook <span class="hljs-string">&quot;/root/code/certbot/au.sh python aly clean&quot;</span><br><span class="hljs-built_in">cp</span> /etc/letsencrypt/live/example.com/fullchain.pem /opt/docker/nginx/cert<br><span class="hljs-built_in">cp</span> /etc/letsencrypt/live/example.com/privkey.pem /opt/docker/nginx/cert<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Certificates Renewed&quot;</span><br><span class="hljs-built_in">chmod</span> 777 /opt/docker/nginx/cert/*.pem<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Read Permission Granted for Private Key&quot;</span><br>docker start nginx<br></code></pre></td></tr></table></figure><p>添加执行权限 <code>chmod +x /opt/docker/nginx/cert/renew.sh</code></p><p>定时任务 <code>crontab -e</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#证书有效期&lt;30天才会renew</span><br>0 4 1 * * /bin/bash /opt/docker/nginx/cert/renew.sh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
